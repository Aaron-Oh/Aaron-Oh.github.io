&lt;?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Jay Log</title>
        <link>http://jaym-oh.github.io/</link>
        <description></description>
        <language>en-us</language>
        <generator>Hugo -- gohugo.io</generator>
    
        <item>
            <title>Understanding Docker and Running Hello World</title>
            <link>http://jaym-oh.github.io/posts/docker/docker_2/</link>
            <description>&lt;![CDATA[<h1 id="basic-use-of-docker">Basic use of Docker</h1>
<h2 id="running-hello-world-in-a-container">Running Hello World in a container</h2>
<p>Let&rsquo;s just simply run below code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">docker container run diamol/ch02-hello-diamol
</span></span></code></pre></td></tr></table>
</div>
</div><p>May you don&rsquo;t know the meaning of code, It&rsquo;s okay. At the end of this chapter, you will know what that means naturally. Since I already download image <code>diamol/ch02-hello-diamol</code>, print out like below:</p>
<blockquote>
<p>success</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">  docker container run diamol/ch02-hello-diamol
</span></span><span class="line"><span class="cl">  ---------------------
</span></span><span class="line"><span class="cl">  Hello from Chapter 2!
</span></span><span class="line"><span class="cl">  ---------------------
</span></span><span class="line"><span class="cl">  My name is:
</span></span><span class="line"><span class="cl">  b56c8d50100a
</span></span><span class="line"><span class="cl">  ---------------------
</span></span><span class="line"><span class="cl">  Im running on:
</span></span><span class="line"><span class="cl">  Linux 6.6.16-linuxkit aarch64
</span></span><span class="line"><span class="cl">  ---------------------
</span></span><span class="line"><span class="cl">  My address is:
</span></span><span class="line"><span class="cl">  inet addr:172.17.0.2 Bcast:172.17.255.255 Mask:255.255.0.0
</span></span><span class="line"><span class="cl">  ---------------------
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>If you want to run container with any image, you need that image first(if you don&rsquo;t have, docker download that image which Docker calls <code>pulling (tip)</code> ). Image have all</p>
<p>This example simply print out message &lsquo;Hello from Chapter 2!&rsquo; with details of container running. The image contains all the content for the application, along with instructions telling Docker how to start the application.</p>
<ul>
<li>The machine name, in this example: b56c8d50100a</li>
<li>The Operating system, in this example: Linux 6.6.16-linuxkit aarch64</li>
<li>The network address, in this example: 172.17.0.2</li>
</ul>
<p>Though It&rsquo;s very simple example, we could see the fundamental of docker workflow. <code>build (primary)</code> - <code>share (primary)</code> - <code>run (primary)</code> For the specific descriptions, Someone packages their application to run in a container, and then publishes it so it’s available to other users. Then anyone with access can run the app in a container.</p>
<p>These three concepts are powerful enough to describe how docker works. Because the workflow is the same no matter how complicated the application is. And Docker images can be packaged to run on any com- puter that supports Docker, which makes the app completely portable—<code>portability (tip)</code> is one of Docker’s key benefits.</p>
<blockquote>
<p>tip
Try it agin</p>
</blockquote>
<p>What if you run exatly same command in terminal? There might me &lsquo;almost&rsquo; same output, but sligtly different points are.</p>
<blockquote>
<p>success</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">docker container run diamol/ch02-hello-diamol
</span></span><span class="line"><span class="cl">---------------------
</span></span><span class="line"><span class="cl">Hello from Chapter 2!
</span></span><span class="line"><span class="cl">---------------------
</span></span><span class="line"><span class="cl">My name is:
</span></span><span class="line"><span class="cl">dab89ec979a1
</span></span><span class="line"><span class="cl">---------------------
</span></span><span class="line"><span class="cl">Im running on:
</span></span><span class="line"><span class="cl">Linux 6.6.16-linuxkit aarch64
</span></span><span class="line"><span class="cl">---------------------
</span></span><span class="line"><span class="cl">My address is:
</span></span><span class="line"><span class="cl">inet addr:172.17.0.5 Bcast:172.17.255.255 Mask:255.255.0.0
</span></span><span class="line"><span class="cl">---------------------
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>As you can see above, the computer name is &lsquo;dab89ec979a1&rsquo; and inet address is &lsquo;172.17.0.5&rsquo;. The machine name will change every time, and the IP address will often change, but every container is running on the same computer, so where do these dif- ferent machine names and network addresses come from? We’ll dig into a little theory next to explain that, and then it’s back to the exercises.</p>
<h2 id="what-is-container">What is container?</h2>
<p>This is example of application whis is in the container:</p>
<p><img src="/images/2_2.jpeg" alt="photo" title="Fig 2.2"></p>
<p>A Docker container is the same idea as a physical container—think of it like a box with an application in it. Inside the box, the application seems to have a computer all to itself: it has its own machine name and IP address, and it also has its own disk drive (Windows containers have their own Windows Registry too). Figure 2.2 shows how the app is boxed by the container.<br>
Those things are all virtual resources—the hostname, IP address, and filesystem are created by Docker. They’re logical objects that are managed by Docker, and they’re all joined together to create an environment where an application can run. That’s the “box” of the container.<br>
The application inside the box can’t see anything outside the box, but the box is running on a computer, and that computer can also be running lots of other boxes. The applications in those boxes have their own separate environments (managed by Docker), but they all share the CPU and memory of the computer, and they all share the computer’s operating system. You can see in <em>figure 2.3</em> how containers on the same computer are isolated.</p>
<p><img src="/images/2_2.jpeg" alt="photo" title="Fig 2.3"></p>
<p>Why is this so important? It fixes two conflicting problems in computing: <code>isolation (tip)</code> and <code>density (tip)</code>. Density means running as many applications on your computers as possible, to utilize all the processor and memory that you have. But apps may not work nicely with other apps—they might use different versions of Java or .NET, they may use incompatible versions of tools or libraries, or one might have a heavy workload and starve the others of processing power. Applications really need to be isolated from each other, and that stops you running lots of them on a single computer, so you don’t get density.<br>
The original attempt to fix that problem was to use virtual machines (VMs). Virtual machines are similar in concept to containers, in that they give you a box to run your application in, but the box for a VM needs to contain its own operating system—it doesn’t share the OS of the computer where the VM is running. Compare <em>figure 2.3</em>, which shows multiple containers, with <em>figure 2.4</em>, which shows multiple VMs on one computer.</p>
<p><img src="/images/2_4.jpeg" alt="photo" title="Fig 2.4"></p>
<p>That may look like a small difference in the diagrams, but it has huge implications. Every VM needs its own operating system, and that OS can use gigabytes of memory and lots of CPU time—soaking up compute power that should be available for your applications. There are other concerns too, like licensing costs for the OS and the maintenance burden of installing OS updates. VMs provide isolation at the cost of density.<br>
Containers give you both. Each container shares the operating system of the com- puter running the container, and that makes them extremely lightweight. Containers start quickly and run lean, so you can run many more containers than VMs on the same hardware—typically five to ten times as many. You get density, but each app is in its own container, so you get isolation too. That’s another key feature of Docker: efficiency.<br>
Now you know how Docker does its magic. In the next exercise we’ll work more closely with containers.</p>
<h2 id="connecting-to-a-container-like-a-remote-computer">Connecting to a container like a remote computer</h2>
<p>You can work with containers in other ways too. Next you’ll see how you can run a container and connect to a terminal inside the container, just as if you were connecting to a remote machine. You use the same docker container run command, but you pass some additional flags to run an interactive container with a connected terminal session.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">docker container run --interactive --tty diamol/base
</span></span></code></pre></td></tr></table>
</div>
</div><p>The &ndash;interactive flag tells Docker you want to set up a connection to the container, and the &ndash;tty flag means you want to connect to a terminal session inside the con- tainer. The output will show Docker pulling the image, and then you’ll be left with a command prompt. That command prompt is for a terminal session inside the container, as you can see in <em>figure 2.5</em>.</p>
<p><img src="/images/2_5.jpeg" alt="photo" title="Fig 2.5"></p>
]]></description>
            <pubDate>Sat, 01 Apr 2023 16:45:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://jaym-oh.github.io/posts/docker/docker_2/</guid>
        </item>
    
        <item>
            <title>Before you begin</title>
            <link>http://jaym-oh.github.io/posts/docker/docker_1/</link>
            <description>&lt;![CDATA[<p>Welecome to the <code>Docker</code> series and I&rsquo;m gonna study this book, <code>Learn Docker in a Month of Lunches</code>(2020), by own my word.</p>
<p>This series consists of 4 parts:</p>
<ol>
<li>Understaning Docker Containers &amp; Images</li>
<li>Running Distributed Applications in Containers</li>
<li>Running at Scale with a Container Orchestrator</li>
<li>Getting Your Containers Ready for Production</li>
</ol>
<p>This is the first post about series <code>Docker</code>.
In this part, you can get up to speed quickly on the core Docker concepts: containers, images, and registries. you&rsquo;ll learn how to run applications in containers, package your own applications in containers, and share those applications for other people to use. You&rsquo;ll also learn about storing data in Docker volumes and how you can run stateful apps in containers. After throughing this chapter, you&rsquo;ll be comfortable with all the fundamentals of Docker, and you&rsquo;ll be learning with best pracices baked in from the start.</p>
<h1 id="what-is-docker">What is Docker</h1>
<p>Docker is a platform for running application in lightweight units called <em>containers.</em> Containers have taken hold in software everywhere, from werverless functions in the cloud to strategic planning in the enterprise. Docker is becoming a core com- petency for operators and developers across the industry—in the 2019 Stack Overflow survey, Docker polled as people’s number one “most wanted” technology   And Docker is a simple technology to learn. You can pick up this book as a com- plete beginner, and you’ll be running containers in chapter 2 and packaging appli- cations to run in Docker in chapter 3. Each chapter focuses on practical tasks, with examples and labs that work on any machine that runs Docker—Windows, Mac, and Linux users are all welcome here.   The journey you’ll follow in this book has been honed over the many years I’ve been teaching Docker. Every chapter is hands-on—except this one. Before you start learning Docker, it’s important to understand just how containers are being used in the real world and the type of problems they solve—that’s what I’ll cover here. This chapter also describes how I’ll be teaching Docker, so you can figure out if this is the right book for you.
Now let’s look at what people are doing with containers—I’ll cover the five main scenarios where organizations are seeing huge success with Docker. You’ll see the wide range of problems you can solve with containers, some of which will certainly map to scenarios in your own work. By the end of this chapter you’ll understand why Docker is a technology you need to know, and you’ll see how this book will get you there.</p>
<h2 id="why-containers-will-take-over-the-world">Why containers will take over the world</h2>
<h2 id="creating-lab-envionment">Creating lab envionment</h2>
<p>how to install docker in your operaing system? docker run in your computer as flows:</p>
<ol>
<li>내 블로그가</li>
<li>왜 음란해</li>
<li>이 미친 ㄱㅇ찰푸덮</li>
<li>아러ㅗㄷㅇ라ㅜ</li>
<li>ㅇ러푸대</li>
<li>루</li>
<li></li>
</ol>
<h2 id="being-immediately-effective">Being immediately effective</h2>
<p>“Immediately effective” is another principle of the Month of Lunches series. In all the chapters that follow, the focus is on learning skills and putting them into practice.
Every chapter starts with a short introduction to the topic, followed by try-it-now exercises where you put the ideas into practice using Docker. Then there’s a recap with some more detail that fills in some of the questions you may have from diving in. Lastly there’s a hands-on lab for you to go the next stage.
All the topics center around tasks that are genuinely useful in the real world. You’ll learn how to be immediately effective with the topic during the chapter, and you’ll fin- ish by understanding how to apply the new skill. Let’s start running some containers!</p>]]></description>
            <pubDate>Tue, 28 Mar 2023 09:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://jaym-oh.github.io/posts/docker/docker_1/</guid>
        </item>
    
    </channel>
</rss>
