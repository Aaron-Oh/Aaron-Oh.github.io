&lt;?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Jay Log</title>
        <link>http://localhost:1313/</link>
        <description></description>
        <language>en-us</language>
        <generator>Hugo -- gohugo.io</generator>
    
        <item>
            <title>High Score Kit: DFS&amp;BFS#2</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/dfsbfs/target_number/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>You are given an array of non-negative integers and a target number. Your task is to find how many ways you can add and subtract the given numbers to achieve the target number. The order of numbers in the array must be preserved. For example, with the array [1, 1, 1, 1, 1], there are five ways to reach the target number 3:</p>
<ul>
<li>-1 + 1 + 1 + 1 + 1 = 3</li>
<li>+1 - 1 + 1 + 1 + 1 = 3</li>
<li>+1 + 1 - 1 + 1 + 1 = 3</li>
<li>+1 + 1 + 1 - 1 + 1 = 3</li>
<li>+1 + 1 + 1 + 1 - 1 = 3</li>
</ul>
<p>Implement the function <code>solution</code> which, given an array <code>numbers</code> and a target number <code>target</code>, returns the number of different ways to add or subtract the numbers to equal the target.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li>The number of integers in the array is between 2 and 20.</li>
<li>Each number is a natural number between 1 and 50.</li>
<li>The target number is a natural number between 1 and 1000.</li>
</ul>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th>numbers</th>
<th>target</th>
<th>return</th>
</tr>
</thead>
<tbody>
<tr>
<td>[1, 1, 1, 1, 1]</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>[4, 1, 2, 1]</td>
<td>4</td>
<td>2</td>
</tr>
</tbody>
</table>
<h3 id="explanation-of-examples">Explanation of Examples</h3>
<ul>
<li><strong>Example 1:</strong>
<ul>
<li>As described in the problem statement, there are five ways to combine the operations of addition and subtraction to achieve the target number 3 using the array [1, 1, 1, 1, 1].</li>
</ul>
</li>
<li><strong>Example 2:</strong>
<ul>
<li>There are two ways to achieve the target number 4 with the array [4, 1, 2, 1]:
<ul>
<li>+4 + 1 - 2 + 1 = 4</li>
<li>+4 - 1 + 2 - 1 = 4</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">dfs</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">index</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">numbers</span><span class="p">.</span><span class="na">length</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">sum</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">target</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">plus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dfs</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">numbers</span><span class="o">[</span><span class="n">index</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">minus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dfs</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">numbers</span><span class="o">[</span><span class="n">index</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">plus</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">minus</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Thu, 11 Apr 2024 15:25:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/dfsbfs/target_number/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Brute Force#2</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/bruteforce/wire_cut/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>In a power grid network composed of <code>n</code> transmission towers connected in a tree structure via wires, you are tasked with dividing the network into two parts by cutting one of the wires. The goal is to make the number of transmission towers in each part as equal as possible. Given the number of towers <code>n</code> and the wire connections <code>wires</code>, your function <code>solution</code> should return the smallest difference in the number of transmission towers between the two resulting networks after one cut.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li><code>n</code> is a natural number between 2 and 100, inclusive.</li>
<li><code>wires</code> is a two-dimensional array of integers with a length of <code>n-1</code>.</li>
<li>Each element in <code>wires</code> is a pair <code>[v1, v2]</code>, indicating that the transmission tower <code>v1</code> is connected to tower <code>v2</code> via a wire.</li>
<li><code>1 ≤ v1 &lt; v2 ≤ n</code>.</li>
<li>The network always forms a single tree structure.</li>
</ul>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th>n</th>
<th>wires</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>9</td>
<td>[[1,3],[2,3],[3,4],[4,5],[4,6],[4,7],[7,8],[7,9]]</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>[[1,2],[2,3],[3,4]]</td>
<td>0</td>
</tr>
<tr>
<td>7</td>
<td>[[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]]</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="explanation-of-examples">Explanation of Examples</h3>
<ul>
<li><strong>Example 1:</strong>
<ul>
<li>There are 9 towers connected by 8 wires forming a tree. By choosing the optimal wire to cut, the difference in the number of towers between the two resulting networks can be minimized to 3.</li>
</ul>
</li>
<li><strong>Example 2:</strong>
<ul>
<li>With 4 towers connected in a straight line, cutting any of the wires results in two parts with an equal number of towers, resulting in a difference of 0.</li>
</ul>
</li>
<li><strong>Example 3:</strong>
<ul>
<li>A network of 7 towers can be split by the optimal wire cut to achieve a minimum tower difference of 1 between the two networks.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">adjList</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">visited</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">totalTowers</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">minDifference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">wires</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">totalTowers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">visited</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Initialize adjacency list for all nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Construct the tree using adjacency list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">wire</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">wires</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">v1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wire</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">v2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wire</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v1</span><span class="p">).</span><span class="na">add</span><span class="p">(</span><span class="n">v2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v2</span><span class="p">).</span><span class="na">add</span><span class="p">(</span><span class="n">v1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Try cutting each wire and calculate the difference</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">wire</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">wires</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">v1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wire</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">v2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wire</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Remove the connection (cut the wire)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v1</span><span class="p">).</span><span class="na">remove</span><span class="p">(</span><span class="n">Integer</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">v2</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v2</span><span class="p">).</span><span class="na">remove</span><span class="p">(</span><span class="n">Integer</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">v1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Reset visited array for new DFS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">visited</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">towersInSubtree</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">countTowersDFS</span><span class="p">(</span><span class="n">v1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Calculate difference in towers and update minDifference</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">difference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">abs</span><span class="p">(</span><span class="n">totalTowers</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">towersInSubtree</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">minDifference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">min</span><span class="p">(</span><span class="n">minDifference</span><span class="p">,</span><span class="w"> </span><span class="n">difference</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Reconnect the wire</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v1</span><span class="p">).</span><span class="na">add</span><span class="p">(</span><span class="n">v2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">v2</span><span class="p">).</span><span class="na">add</span><span class="p">(</span><span class="n">v1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">minDifference</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">countTowersDFS</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">node</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">visited</span><span class="o">[</span><span class="n">node</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">towersCount</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// Count the current node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Recurse on all adjacent nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">adjNode</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">adjList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">node</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="o">[</span><span class="n">adjNode</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">towersCount</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">countTowersDFS</span><span class="p">(</span><span class="n">adjNode</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">towersCount</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Thu, 11 Apr 2024 13:34:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/bruteforce/wire_cut/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Brute Force#1</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/bruteforce/fatigue/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>In the XX game, there is a fatigue system represented by non-negative integers, allowing players to explore dungeons by using a certain amount of fatigue. Each dungeon requires a &ldquo;minimum required fatigue&rdquo; to start exploring and consumes a certain amount of &ldquo;fatigue&rdquo; upon completion. For example, to explore a dungeon with a &ldquo;minimum required fatigue&rdquo; of 80 and a &ldquo;consumption fatigue&rdquo; of 20, a player&rsquo;s current remaining fatigue must be at least 80, and it will decrease by 20 after exploring the dungeon. The game features multiple dungeons that can be explored once a day, and a player aims to maximize the number of dungeons explored in a day. Given the player&rsquo;s current fatigue <code>k</code> and a 2D array <code>dungeons</code> that contains the &ldquo;minimum required fatigue&rdquo; and &ldquo;consumption fatigue&rdquo; for each dungeon, implement a function <code>solution</code> to return the maximum number of dungeons a player can explore.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li><code>k</code> is a natural number between 1 and 5,000.</li>
<li>The length of the <code>dungeons</code> array (number of dungeons) is between 1 and 8.</li>
<li>Each row in the <code>dungeons</code> array has 2 elements representing the [&ldquo;minimum required fatigue&rdquo;, &ldquo;consumption fatigue&rdquo;] for each dungeon.</li>
<li>&ldquo;Minimum required fatigue&rdquo; is always equal to or greater than &ldquo;consumption fatigue&rdquo;.</li>
<li>Both &ldquo;minimum required fatigue&rdquo; and &ldquo;consumption fatigue&rdquo; range from 1 to 1,000.</li>
<li>Different dungeons can have the same [&ldquo;minimum required fatigue&rdquo;, &ldquo;consumption fatigue&rdquo;] values.</li>
</ul>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th>k</th>
<th>dungeons</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td>[[80,20],[50,40],[30,10]]</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3 id="explanation-of-examples">Explanation of Examples</h3>
<p>In the example, the player starts with a fatigue of 80. If the player explores the dungeons in the sequence of the first → third → second, here&rsquo;s how it goes:</p>
<ul>
<li>Initial fatigue is 80, matching the first dungeon&rsquo;s &ldquo;minimum required fatigue&rdquo; of 80. After exploring, the remaining fatigue is 60.</li>
<li>The remaining fatigue is 60, which is enough for the third dungeon&rsquo;s &ldquo;minimum required fatigue&rdquo; of 30. After exploring, the remaining fatigue is 50.</li>
<li>The remaining fatigue is 50, matching the second dungeon&rsquo;s &ldquo;minimum required fatigue&rdquo; of 50. After exploring, the remaining fatigue is 10.
Thus, in this scenario, the player can explore all three dungeons, making the maximum number of dungeons explored 3.</li>
</ul>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">dungeons</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">visited</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[</span><span class="n">dungeons</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">exploreDungeons</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="w"> </span><span class="n">dungeons</span><span class="p">,</span><span class="w"> </span><span class="n">visited</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">answer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">exploreDungeons</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">fatigue</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">dungeons</span><span class="p">,</span><span class="w"> </span><span class="kt">boolean</span><span class="o">[]</span><span class="w"> </span><span class="n">visited</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">dungeons</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">dungeons</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">fatigue</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Mark the dungeon as visited</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Recursively try the next dungeons with the updated fatigue and count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">exploreDungeons</span><span class="p">(</span><span class="n">fatigue</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">dungeons</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">1</span><span class="o">]</span><span class="p">,</span><span class="w"> </span><span class="n">dungeons</span><span class="p">,</span><span class="w"> </span><span class="n">visited</span><span class="p">,</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Backtrack: unmark the dungeon as visited for the next iterations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Math</span><span class="p">.</span><span class="na">max</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span><span class="w"> </span><span class="n">count</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Thu, 11 Apr 2024 10:20:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/bruteforce/fatigue/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Stack&amp;Queue#2</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/stackqueue/feature_improvement_task/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>The Programmers team is currently performing feature improvement tasks. Each feature can only be released when its progress reaches 100%. However, since the development speed of each feature varies, it is possible for features developed later to be completed earlier. In such cases, a feature that is developed later will be released together with the feature in front of it that is scheduled for earlier release.</p>
<p>Given an integer array <code>progresses</code> which represents the current progress of each task and an integer array <code>speeds</code> which represents the daily development speed of each task, implement a function <code>solution</code> that returns an array indicating how many features are released together on each release day.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li>The number of tasks (<code>length of progresses and speeds</code>) is no more than 100.</li>
<li>Task progress is a natural number less than 100.</li>
<li>Task speed is a natural number up to 100.</li>
<li>Deployment can only happen once per day and occurs at the end of the day.
For example, if a task is 95% complete and progresses at a rate of 4% per day, it will be deployable in 2 days.</li>
</ul>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th>progresses</th>
<th>speeds</th>
<th>return</th>
</tr>
</thead>
<tbody>
<tr>
<td>[93, 30, 55]</td>
<td>[1, 30, 5]</td>
<td>[2, 1]</td>
</tr>
<tr>
<td>[95, 90, 99, 99, 80, 99]</td>
<td>[1, 1, 1, 1, 1, 1]</td>
<td>[1, 3, 2]</td>
</tr>
</tbody>
</table>
<h3 id="explanation-of-examples">Explanation of Examples</h3>
<ul>
<li>
<p><strong>Example #1:</strong></p>
<ul>
<li>The first feature is 93% complete and progresses at 1% per day, thus it takes 7 days to complete.</li>
<li>The second feature is 30% complete and progresses at 30% per day, thus it takes 3 days. However, it must wait for the first feature to be deployed, hence it is deployed on the 7th day along with the first feature.</li>
<li>The third feature is 55% complete and progresses at 5% per day, thus it takes 9 days.</li>
<li>As a result, on the 7th day, 2 features are deployed and on the 9th day, 1 feature is deployed.</li>
</ul>
</li>
<li>
<p><strong>Example #2:</strong></p>
<ul>
<li>All features progress at 1% per day. The remaining days for the tasks to be completed are 5 days, 10 days, 1 day, 1 day, 20 days, and 1 day, respectively.</li>
<li>Even if a feature is completed, it cannot be deployed until all the preceding features are also ready for deployment.</li>
<li>Therefore, 1 feature is deployed on the 5th day, 3 features on the 10th day, and 2 features on the 20th day.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h2 id="step2-array-copy-and-sort">Step2: Array copy and sort</h2>
<h2 id="step3-designate-elements-to-output-array">Step3: Designate elements to output array</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">progresses</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">speeds</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">leftDays</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">queue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LinkedList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">progresses</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">leftDay</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="na">ceil</span><span class="p">(</span><span class="w"> </span><span class="p">(</span><span class="n">100</span><span class="p">.</span><span class="na">0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">progresses</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">speeds</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">leftDays</span><span class="p">.</span><span class="na">offer</span><span class="p">(</span><span class="n">leftDay</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">leftDays</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">leftDays</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">while</span><span class="p">(</span><span class="n">leftDays</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">features</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">leftDays</span><span class="p">.</span><span class="na">peek</span><span class="p">()){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">leftDays</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">count</span><span class="o">++</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">queue</span><span class="p">.</span><span class="na">offer</span><span class="p">(</span><span class="n">count</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">queue</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">answer</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">queue</span><span class="p">.</span><span class="na">poll</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">answer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Wed, 10 Apr 2024 21:35:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/stackqueue/feature_improvement_task/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Stack&amp;Queue#1</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/stackqueue/no_duplicate_number/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>Given an array <code>arr</code> consisting of integers ranging from 0 to 9, the task is to remove consecutive duplicates while preserving the order of the remaining elements. For instance, if <code>arr = [1, 1, 3, 3, 0, 1, 1]</code>, the result should be <code>[1, 3, 0, 1]</code>. Similarly, for <code>arr = [4, 4, 4, 3, 3]</code>, the result should be <code>[4, 3]</code>. Implement the function <code>solution</code> that returns an array containing the elements after removing consecutive duplicates.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li>The size of the array <code>arr</code> is a natural number less than or equal to 1,000,000.</li>
<li>Each element of <code>arr</code> is an integer between 0 and 9, inclusive.</li>
</ul>
<h3 id="example-inputs-and-outputs">Example Inputs and Outputs</h3>
<table>
<thead>
<tr>
<th>arr</th>
<th>answer</th>
</tr>
</thead>
<tbody>
<tr>
<td>[1, 1, 3, 3, 0, 1, 1]</td>
<td>[1, 3, 0, 1]</td>
</tr>
<tr>
<td>[4, 4, 4, 3, 3]</td>
<td>[4, 3]</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h2 id="step2-array-copy-and-sort">Step2: Array copy and sort</h2>
<h2 id="step3-designate-elements-to-output-array">Step3: Designate elements to output array</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="o">[]</span><span class="n">arr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="w"> </span><span class="n">stack</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayDeque</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stack</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="na">peek</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">stack</span><span class="p">.</span><span class="na">push</span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">stack</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">stack</span><span class="p">.</span><span class="na">size</span><span class="p">()</span><span class="o">-</span><span class="n">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stack</span><span class="p">.</span><span class="na">pop</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">answer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Wed, 10 Apr 2024 20:43:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/stackqueue/no_duplicate_number/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Sorting#3</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/sorting/h_index/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>The H-Index is a metric that measures the productivity and impact of a scientist&rsquo;s research. It represents the highest number h such that the scientist has published h papers that have each been cited at least h times. According to Wikipedia, the H-Index is calculated as follows:<br>
For a given scientist who has published n papers, if h of these papers have at least h citations each, and the other papers have no more than h citations each, then h is the maximum value for this scientist&rsquo;s H-Index.</p>
<p>You are required to implement the function <code>solution</code> that calculates and returns the H-Index for a scientist given an array <code>citations</code>, which contains the citation count for each of the scientist&rsquo;s publications.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li>The number of papers published by the scientist ranges from 1 to 1,000.</li>
<li>Each paper has been cited between 0 and 10,000 times.</li>
</ul>
<h2 id="example-inputs-and-outputs">Example Inputs and Outputs</h2>
<table>
<thead>
<tr>
<th>citations</th>
<th>return</th>
</tr>
</thead>
<tbody>
<tr>
<td>[3, 0, 6, 1, 5]</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3 id="explanation-of-example">Explanation of Example</h3>
<p>The scientist has published 5 papers. Three of these papers have been cited at least 3 times. The remaining two papers have been cited 3 times or fewer. Thus, the scientist&rsquo;s H-Index is 3.</p>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h2 id="step2-array-copy-and-sort">Step2: Array copy and sort</h2>
<h2 id="step3-designate-elements-to-output-array">Step3: Designate elements to output array</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.Arrays</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">citations</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">citations</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">citations</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&gt;=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">citations</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">answer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Wed, 10 Apr 2024 19:36:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/sorting/h_index/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Sorting#2</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/sorting/maximum_number/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>Given an array of non-negative integers, your task is to determine the largest number that can be formed by concatenating the integers together. For example, with the integers [6, 10, 2], you can form the numbers [6102, 6210, 1062, 1026, 2610, 2106] through different arrangements. The largest number from these combinations is 6210. When provided with the array <code>numbers</code>, the goal is to rearrange the numbers to form the largest possible concatenated number and return this number as a string.</p>
<h2 id="constraints">Constraints</h2>
<ul>
<li>The length of the <code>numbers</code> array is between 1 and 100,000.</li>
<li>Each element in the <code>numbers</code> array is a non-negative integer between 0 and 1,000.</li>
<li>The output number can be very large, so it should be returned as a string.</li>
</ul>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th>numbers</th>
<th>return</th>
</tr>
</thead>
<tbody>
<tr>
<td>[6, 10, 2]</td>
<td>&ldquo;6210&rdquo;</td>
</tr>
<tr>
<td>[3, 30, 34, 5, 9]</td>
<td>&ldquo;9534330&rdquo;</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h2 id="step2-array-copy-and-sort">Step2: Array copy and sort</h2>
<h2 id="step3-designate-elements-to-output-array">Step3: Designate elements to output array</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.Arrays</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.Comparator</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Solution</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">numbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">strNumbers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="o">[</span><span class="n">numbers</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">numbers</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">strNumbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">String</span><span class="p">.</span><span class="na">valueOf</span><span class="p">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">strNumbers</span><span class="p">,</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">compare</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">o1</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">o2</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">o2</span><span class="o">+</span><span class="n">o1</span><span class="p">).</span><span class="na">compareTo</span><span class="p">(</span><span class="n">o1</span><span class="o">+</span><span class="n">o2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">strNumbers</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;0&#34;</span><span class="p">)){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;0&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">StringBuilder</span><span class="w"> </span><span class="n">sb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringBuilder</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">strNumber</span><span class="p">:</span><span class="n">strNumbers</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sb</span><span class="p">.</span><span class="na">append</span><span class="p">(</span><span class="n">strNumber</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">sb</span><span class="p">.</span><span class="na">toString</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Wed, 10 Apr 2024 18:24:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/sorting/maximum_number/</guid>
        </item>
    
        <item>
            <title>High Score Kit: Sorting#1</title>
            <link>http://localhost:1313/posts/algorithm/highscore_kit/sorting/kth_number/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>To find a number at the k-th position after slicing and sorting the array from the i-th to j-th number, consider the following:
For example, if the array is [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, and k = 3,
slicing the array from the 2nd to the 5th number yields [5, 2, 6, 3].
Sorting the array obtained from step 1 results in [2, 3, 5, 6].
The number at the 3rd position of the array from step 2 is 5.
Write a function <code>solution</code> that returns an array of results obtained by applying the aforementioned operation to every element of a 2D array <code>commands</code>, where <code>commands</code> contains elements [i, j, k], given the array <code>array</code> and <code>commands</code> as parameters.</p>
<h2 id="constraints">Constraints:</h2>
<ul>
<li>The length of <code>array</code> is between 1 and 100, inclusive.</li>
<li>Each element of <code>array</code> is between 1 and 100, inclusive.</li>
<li>The length of <code>commands</code> is between 1 and 50, inclusive.</li>
<li>Each element of <code>commands</code> has a length of 3.</li>
</ul>
<p>Example:</p>
<table>
<thead>
<tr>
<th>array</th>
<th>commands</th>
<th>return</th>
</tr>
</thead>
<tbody>
<tr>
<td>[1, 5, 2, 6, 3, 7, 4]</td>
<td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>
<td>[5, 6, 3]</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="how-to-approach">How to Approach?</h1>
<h2 id="step1-initialize-variables-in-loop">Step1: Initialize variables in loop</h2>
<h2 id="step2-array-copy-and-sort">Step2: Array copy and sort</h2>
<h2 id="step3-designate-elements-to-output-array">Step3: Designate elements to output array</h2>
<h1 id="final-code">Final Code</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.Arrays</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Solution</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="nf">solution</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">array</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[][]</span><span class="w"> </span><span class="n">commands</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">answer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">commands</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">commands</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">commands</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">0</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">commands</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">commands</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">2</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">new_array</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">arraycopy</span><span class="p">(</span><span class="n">array</span><span class="p">,</span><span class="w"> </span><span class="n">start</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">new_array</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Arrays</span><span class="p">.</span><span class="na">sort</span><span class="p">(</span><span class="n">new_array</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_array</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="n">1</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">answer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Wed, 10 Apr 2024 17:20:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/highscore_kit/sorting/kth_number/</guid>
        </item>
    
        <item>
            <title>Sorting Problem</title>
            <link>http://localhost:1313/posts/algorithm/sorting/sorting_2/</link>
            <description>&lt;![CDATA[<h1 id="problem">Problem</h1>
<p>Jay likes sequences, so he use to playing with a sequence of size N. He will transform the sequence according to K queries, and the format and process of the queries are as follows:</p>
<ul>
<li>L R X: Let&rsquo;s say the sequence sorted in ascending order is A[1], A[2], …, A[N].</li>
<li>First, add X to A[L], A[L+1], …, A[R].</li>
<li>Then, sort the sequence again in ascending order.</li>
</ul>
<p>Print the sequence after performing all the queries in order.</p>
<h2 id="input">Input</h2>
<blockquote>
<p>tip
The first line is given with N and K separated by a space. (1 ≤ N ≤ 100000, 1 ≤ K ≤ 1000)<br>
The second line is given with N integers that make up the sequence, each having an absolute value of less than or equal to 10^18.<br>
From the third line to the (K+2)th line, the queries L R X are given. (1 ≤ L ≤ R ≤ N, |X| ≤ 10^9)</p>
</blockquote>
<h2 id="output">Output</h2>
<blockquote>
<p>tip
Print the sequence after performing all the queries in order.</p>
</blockquote>
<hr>
<p><code>Example: (tip)</code></p>
<pre tabindex="0"><code class="language-math" data-lang="math">\(Input:  
7 3  
1 2 3 4 5 6 7  
1 6 3  
2 7 -4  
4 5 6  

Output: 
1 2 3 4 5 9 10\)
</code></pre><hr>
<h1 id="how-to-approach">How to Approach?</h1>
<p>Though there is no single correct solution, there are effective ones. I usally take follow steps:</p>
<ol>
<li>we need a <code>input function</code></li>
<li><code>validation function</code> to prove user input proper or not</li>
<li><code>print function</code> to print out our output</li>
<li><code>do function</code> (This can be further divided into several actions)</li>
<li>(if we need)<code>calculate function</code></li>
</ol>
<h2 id="step1-input-function">step1. Input function</h2>
<p>First we need <code>input function</code>. In java, there exist some other input method but I usually use this method:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.BufferedReader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.IOException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.InputStreamReader</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.StringTokenizer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">getUserInput</span><span class="p">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span><span class="w"> </span><span class="n">sequence</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">nk</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">IOException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">BufferedReader</span><span class="w"> </span><span class="n">br</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">BufferedReader</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">InputStreamReader</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">in</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">StringTokenizer</span><span class="w"> </span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringTokenizer</span><span class="p">(</span><span class="n">br</span><span class="p">.</span><span class="na">readLine</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nk</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">parseInt</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="na">nextToken</span><span class="p">());</span><span class="w"> </span><span class="c1">// N</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">nk</span><span class="o">[</span><span class="n">1</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">parseInt</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="na">nextToken</span><span class="p">());</span><span class="w"> </span><span class="c1">// K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">StringTokenizer</span><span class="p">(</span><span class="n">br</span><span class="p">.</span><span class="na">readLine</span><span class="p">());</span><span class="w"> </span><span class="c1">// Tokenizing the sequence line</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="na">hasMoreTokens</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sequence</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">Long</span><span class="p">.</span><span class="na">parseLong</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="na">nextToken</span><span class="p">()));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>By using BufferedReader, you can quickly get input values.</p>
<h2 id="step2-validation-function">step2. validation function</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">sequence</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span><span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">sequence</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">    <span class="n">sequence</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">sequence</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Fri, 29 Mar 2024 17:20:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/sorting/sorting_2/</guid>
        </item>
    
        <item>
            <title>How to Sort Data</title>
            <link>http://localhost:1313/posts/algorithm/sorting/sorting_1/</link>
            <description>&lt;![CDATA[<h1 id="introduction">Introduction</h1>
<h2 id="what-this-post-focus-on">What this post focus on</h2>
<h2 id="this-posting-will-cover-almost-every-concept-of--how-to-sort-primary-plus-ill-post-realistic-algorithm-problem-of-our-real-world-so-that-you-can-apply-those-concept-to-real-world-problem-and-learn-how-to-use-it-i-really-hope-so">This posting will cover almost every concept of  <code>How to sort (primary)</code>. Plus, I&rsquo;ll post realistic algorithm problem of our real world so that you can apply those concept to real world problem and learn how to use it. I really hope so.</h2>
<p>Let&rsquo;s see the below example.</p>
]]></description>
            <pubDate>Fri, 29 Mar 2024 16:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/algorithm/sorting/sorting_1/</guid>
        </item>
    
        <item>
            <title>ch15. Data type in DB</title>
            <link>http://localhost:1313/posts/database/db_15_2/</link>
            <description>&lt;![CDATA[<h1 id="enum">ENUM</h1>
<ul>
<li>테이블의 구조에 나열된 목록 중 하나의 값을 가질 수 있다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_enum</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_enum</span><span class="w"> </span><span class="n">enum</span><span class="p">(</span><span class="s1">&#39;PROCESSING&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;FAILURE&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SUCCESS&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- 매핑된 문자열이 아닌 내부적으로 저장된 숫자 값으로 연산이 실행됨
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">fd_enum</span><span class="o">*</span><span class="mi">1</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">fd_enum_real_value</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tb_enum</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>enum 타입은 쿼리에서 char, varchar 타입과 같은 문자열로 비교하거나 저장할 수 있다.</li>
<li>enum 타입에 사용할 수 있는 최대 아이템 갯수는 65535개
<ul>
<li>아이템 갯수가 255개 미만이면 1바이트를 사용</li>
</ul>
</li>
<li>장점
<ul>
<li>테이블 구조에 정의된 코드 값만 사용할 수 있게 강제한다.</li>
<li>DB 서버의 디스크 저장 공간의 크기를 줄여줌
<ul>
<li>레코드가 많아질수록 효율적</li>
</ul>
</li>
</ul>
</li>
<li>단점
<ul>
<li>
<p>enum 타입에 새로운 값을 추가한다면 테이블의 구조를 변경해야 한다.</p>
<ul>
<li>MySQL 5.6 이전까지는 항상 테이블을 리빌드해야 했음 -&gt; 별로 사용하지 않음</li>
<li>MySQL 5.6 부터는 새로 추가하는 아이템이 enum 타입의 제일 마지막에 추가되는 형태하면 텡블의 구조 변경만으로 즉시 완료된다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_enum</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">modify</span><span class="w"> </span><span class="n">fd_enum</span><span class="w"> </span><span class="n">enum</span><span class="p">(</span><span class="s1">&#39;PROCESSING&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;FAILURE&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SUCCESS&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;REFUND&#39;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">algorithm</span><span class="o">=</span><span class="n">instant</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_enum</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">modify</span><span class="w"> </span><span class="n">fd_enum</span><span class="w"> </span><span class="n">enum</span><span class="p">(</span><span class="s1">&#39;PROCESSING&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;FAILURE&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;REFUND&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SUCCESS&#39;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">algorithm</span><span class="o">=</span><span class="k">copy</span><span class="p">,</span><span class="w"> </span><span class="k">lock</span><span class="o">=</span><span class="n">shared</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>테이블이 매우 크다면 가독성이 조금 떨어지더라도 새로운 아이템을 enum 마지막에 추가하는 것이 MySQL 서버의 가용성을 높이는 방법</li>
</ul>
</li>
</ul>
</li>
<li>enum 타입 값으로 정렬하면 매핑된 코드 값으로 정렬이 수행됨
<ul>
<li>enum은 문자열이 아닌 정수 타입의 컬럼</li>
<li>되도록이면 enum 기준으로 정렬은 안하는게 좋음</li>
</ul>
</li>
</ul>
<h1 id="set">SET</h1>
<ul>
<li>enum과의 차이: set은 하나의 컬럼에 1개 이상의 값을 저장할 수 있다.
<ul>
<li>MySQL 서버는 내부적으로 BIT-OR 연산을 거쳐서 1개 이상의 선택된 값을 저장한다.</li>
<li>여러 개의 값을 저장할 수 있지만 그만큼의 공간을 가지지는 않음</li>
</ul>
</li>
<li>아이템 수가 8개 이하면 1바이트의 저장공간을 가짐</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_set</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_set</span><span class="w"> </span><span class="k">set</span><span class="p">(</span><span class="s1">&#39;TENNIS&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SOCCER&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;GOLF&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;TABLE-TENNIS&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;BASKETBALL&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;BILLIARD&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_set</span><span class="w"> </span><span class="p">(</span><span class="n">fd_set</span><span class="p">)</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;SOCCER&#39;</span><span class="p">),</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;GOLF,TENNIS&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tb_set</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">find_in_set</span><span class="p">(</span><span class="s1">&#39;GOLF&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">fd_set</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tb_set</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">fd_set</span><span class="o">=</span><span class="s1">&#39;GOLF,TENNIS&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>find_in_set 함수나 like로 검색할 수 있음
<ul>
<li>find_in_set 함수는 해당 컬럼에 인덱스가 있어도 효율적으로 인덱스를 이용할 수 없다.</li>
<li>이런 형태의 검색이 빈번히 사용된다면 set 타입의 컬럼을 정규화해서 별도로 인덱스를 가진 자식 테이블을 생성하는 것이 좋다.</li>
</ul>
</li>
<li>equals 비교 시에는 컬럼에 저장된 순서대로 문자열을 나열해야 검색 가능</li>
<li>중간에 아이템이 추가된다면 테이블의 읽기 잠금과 리빌드 작업이 필요
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">modify</span><span class="w"> </span><span class="n">fd_set</span><span class="w"> </span><span class="k">set</span><span class="p">(</span><span class="s1">&#39;TENNIS&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SOCCER&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;GOLF&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;TABLE-TENNIS&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;Football&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;BASKETBALL&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;BILLIARD&#39;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">algorithm</span><span class="o">=</span><span class="k">copy</span><span class="p">,</span><span class="w"> </span><span class="k">lock</span><span class="o">=</span><span class="n">shared</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>아이템 갯수가 8 -&gt; 9개로 변경될 때는 set 타입을 저장하기 위한 공간을 2바이트로 변경해야하기 때문에 읽기 잠금과 테이블 리빌드 작업이 필요하다.</li>
</ul>
</li>
</ul>
<h1 id="text와-blob">TEXT와 BLOB</h1>
<table>
<thead>
<tr>
<th>데이터 타입</th>
<th>필요 저장 공간 (L = 저장하고자 하는 데이터의 바이트 수)</th>
<th>저장 가능한 최대 바이트 수</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT, TINYBLOB</td>
<td>L + 1바이트</td>
<td>$2^8-1(255)$</td>
</tr>
<tr>
<td>TEXT, BLOB</td>
<td>L + 2바이트</td>
<td>$2^{16} - 1(65535)$</td>
</tr>
<tr>
<td>MEDIUMTEXT, MEDIUMBLOB</td>
<td>L + 3바이트</td>
<td>$2^{24}-1(16777215)$</td>
</tr>
<tr>
<td>LONGTEXT, LONGBLOB</td>
<td>L + 4바이트</td>
<td>$2^{32}-1(4294967295)$</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th>고정길이</th>
<th>가변길이</th>
<th>대용량</th>
</tr>
</thead>
<tbody>
<tr>
<td>문자 데이터</td>
<td>CHAR</td>
<td>VARCHAR</td>
<td>TEXT</td>
</tr>
<tr>
<td>이진 데이터</td>
<td>BINARY</td>
<td>VARBINARY</td>
<td>BLOB</td>
</tr>
</tbody>
</table>
<ul>
<li>TEXT, BLOB 타입 모두 주의하고 남용하면 안됨
<ul>
<li>컬럼 하나에 저장되는 문자열이나 이진 값의 길이가 예측할 수 없이 클 때</li>
<li>일반적으로 하나의 레코드는 전체 크기가 64KB를 넘을 수 없지만 이를 초과할 때</li>
</ul>
</li>
<li>blob/text 컬럼을 조작하는 sql문의 길이가 많이 길어질 수 있음
<ul>
<li>max_allowed_packet 시스템 변수에 설정된 값보다 큰 sql 문장은 MySQL 서버로 전송되지 못하고 오류가 발생할 수 있음</li>
<li>max_allowed_packet 값을 충분히 늘리도록 설정</li>
</ul>
</li>
<li>MySQL 서버에서 text, blob 컬럼의 값이 어떻게 저장되는지는 테이블의 row_format 옵션을 사용한다.
<ul>
<li>별도로 지정되지 않으면 innodb_default_for_format 시스템 변수에 저장된 값으로 적용한다.</li>
<li>MySQL 8.0에서는 사용 가능한 모든 row_format에서는 가능하다면 text/blob 컬럼의 값을 다른 레코드와 같이 저장하려고 하지만 레코드의 최대 길이가 제한적인 문제가 있음
<ul>
<li>레코드의 최대 길이를 초과하면 용량이 큰 컬럼 순서대로 외부 페이지로 옮기면서 레코드의 크기를 맞춘다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="공간-데이터-타입">공간 데이터 타입</h1>
<ul>
<li>MySQL 서버는 OpenGIS에서 제시하는 표준을 준수함
<ul>
<li>WKT (Well Known Text) or WKB (Well Known Binary)를 이용해서 공간 데이터를 관리할 수 있게 지원</li>
<li>MySQL에서 제공하는 공간 정보 저장용 데이터 타입: POINT, LINESTRING, POLYGON, GEOMETRY, GEOMETRYCOLLECTION 등</li>
</ul>
</li>
<li>geometry로 하나의 점/선/다각형을 저장하거나 geometrycollection으로 여러개의 데이터를 저장할 수 있음</li>
</ul>
<h2 id="공간-데이터-생성">공간 데이터 생성</h2>
<ul>
<li>MySQL 서버에서 공간 데이터를 생성할 때는 WKT 포맷을 이진 데이터 포맷의 데이터로 변환할 수 있음
<ul>
<li>WKT 포맷: POINT(x y)</li>
<li>객체 생성: ST_PointFromText(&lsquo;POINT(x y)&rsquo;)
<ul>
<li>FromText 대신 FromWKB를 사용하면 WKB를 이용한 공간 데이터 객체를 생성한다.</li>
</ul>
</li>
</ul>
</li>
<li>두번째 파라미터로 SRID를 설정 가능
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="n">ST_PointFromText</span><span class="p">(</span><span class="s1">&#39;POINT(10,20)&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">ST_PointFromText</span><span class="p">(</span><span class="s1">&#39;POINT(37.123123, 127.233243)&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">ST_PointFromText</span><span class="p">(</span><span class="s1">&#39;POINT(10,20)&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">ST_PointFromText</span><span class="p">(</span><span class="s1">&#39;POINT(37.123123, 127.233243)&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">4326</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>SRID를 명시하지 않으면 <code>SRID=0</code>인 객체를 생성한다.</li>
</ul>
</li>
</ul>
<h2 id="공간-데이터-조회">공간 데이터 조회</h2>
<ul>
<li>MySQL 서버가 관리하는 공간 데이터를 조회하는 방법
<ul>
<li>이진 데이털 조회 (WKB 포맷 or MySQL 이진 포맷)</li>
<li>텍스트 데이터 조회 (WKT 포맷)</li>
<li>공간 데이터의 속성 함수를 이용한 조회</li>
<li>1, 2번째는 공간 데이터 타입과 관계없이 ST_AsText() / ST_AsWKT() or ST_AsBinary() / ST_AsWKB() 함수로 조회 가능</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">set</span><span class="w"> </span><span class="o">@</span><span class="n">poi</span><span class="p">:</span><span class="o">=</span><span class="n">ST_PointFromText</span><span class="p">(</span><span class="s1">&#39;POINT(37.123123 127.123123)&#39;</span><span class="p">,</span><span class="w"> </span><span class="mi">4326</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ST_SRID</span><span class="p">(</span><span class="o">@</span><span class="n">poi</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">srid</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ST_X</span><span class="p">(</span><span class="o">@</span><span class="n">poi</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">coord_x</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ST_Y</span><span class="p">(</span><span class="o">@</span><span class="n">poi</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">coord_y</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ST_Latitude</span><span class="p">(</span><span class="o">@</span><span class="n">poi</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">coord_latitude</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ST_Longitude</span><span class="p">(</span><span class="o">@</span><span class="n">poi</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">coord_longitude</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ST_Latitude ST_Longitude는 위도/경도를 사용하는 좌표시스템의 공간 데이터에서만 사용 가능
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="json-타입">JSON 타입</h1>
<ul>
<li>MySQL 5.7 부터 JSON 데이터를 저장할 수 있는 JSON 타입이 지원되기 시작</li>
<li>MySQL 8.0 부터 많은 기능과 성능이 개선됨</li>
<li>MySQL 서버에서 TEXT, BLOB 컬럼에 JSON 데이터를 저장할 수는 있음</li>
<li>MySQL 5.7부터 지원되는 JSON 데이터 컬럼은 문자열 저장이 아닌 MongoDB와 같이 바이너리 포맷의 BSON(Binary JSON)으로 변환해서 저장한다.</li>
</ul>
<h2 id="저장-방식">저장 방식</h2>
<ul>
<li>BSON 타입으로 변환해서 저장하기 때문에 TEXT/BLOB보다 공간 효율이 높은 편</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_json</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="w"> </span><span class="n">json</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_json</span><span class="w"> </span><span class="k">values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;{&#34;user_id&#34;: 123}&#39;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;{&#34;user_id&#34;: &#34;123&#34;}&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_type</span><span class="p">(</span><span class="n">fd</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s2">&#34;$.user_id&#34;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">field_type</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">json_storage_size</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">byte_size</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">tb_json</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>json document가 MySQL 서버의 JSON 컬럼에 저장되면 이진 데이터로 변환하여 저장한다.</li>
<li>용량이 매우 큰 document가 저장되면 MySQL 서버는 16KB 단위로 여러 개의 데이터 페이지로 나뉘어 저장한더.
<ul>
<li>MySQL 5.7 까지는 BLOB 페이지들이 단순 연결 리스트처럼 관리되었음</li>
<li>MySQL 8.0 부터는 BLOB 페이지들의 인덱스를 관리하고, 각 인덱스는 실제 BLOB 데이터를 가진 페이지들의 링크를 갖도록 개선함</li>
</ul>
</li>
</ul>
<h2 id="부분-업데이트-성능">부분 업데이트 성능</h2>
<ul>
<li>MySQL 8.0 부터 JSON 타입에 대해 부분 업데이트 기능 제공</li>
<li>JSON_SET() JSON_REPLACE() JSON_REMOVE() 함수를 이용해서 JSON document의 특정 필드 값을 변경하거나 삭제하는 경우에만 작동</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">update</span><span class="w"> </span><span class="n">tb_json</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">set</span><span class="w"> </span><span class="n">fd</span><span class="o">=</span><span class="n">json_set</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;$.user_id&#39;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;12345&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">fd</span><span class="p">,</span><span class="w"> </span><span class="n">json_storage_size</span><span class="p">(</span><span class="n">fd</span><span class="p">),</span><span class="w"> </span><span class="n">json_storage_free</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">tb_json</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>id</th>
<th>fd</th>
<th>json_storage_size(fd)</th>
<th>json_storage_free(fd)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>{&ldquo;user_id&rdquo;, 1234567890}</td>
<td>23</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>{&ldquo;user_id&rdquo;, &ldquo;12345&rdquo;}</td>
<td>30</td>
<td>5</td>
</tr>
</tbody>
</table>
<ul>
<li>위 변경 작업이 <code>부분 업데이트</code>로 처리되었는지는 확인할 수 없음
<ul>
<li><code>json_storage_size</code>, <code>json_storage_free</code> 함수로 대략 예측</li>
<li>두번째 레코드는 json_storage_free가 5로 표시됨
<ul>
<li>&ldquo;12345&quot;로 변경되면서 앞 부분의 5바이트 사용, 5바이트는 비움</li>
</ul>
</li>
<li>해당 필드의 값을 10바이트보다 큰 값으로 저장할 경우
<ul>
<li>json_set() 함수를 사용해도 부분 업데이트 진행 x</li>
<li>최초 할당된 공간이 부족해서 MySQL 서버가 JSON 컬럼 or 두번째 레코드를 다른 위치로 복사해서 저장</li>
</ul>
</li>
</ul>
</li>
<li>MySQL 내부적으로 json 컬럼의 값은 BLOB 타입으로 저장되는데 실제 json 컬럼의 값은 4GB까지 값을 가질 수 있음
<ul>
<li>1MB json 데이터를 저장해도 MySQL 서버는 16KB * 64개 페이지를 사용함
<ul>
<li>부분 업데이트를 한다면 1개의 페이지만 변경하면 되고, 안되면 모든 페이지를 다시 디스크로 기록해야함</li>
</ul>
</li>
</ul>
</li>
<li>단순 정수필드의 값을 변경하는 작업은 항상 부분 업데이트 기능이 적용</li>
<li>문자열 타입의 필드라면 문자열의 길이에 따라 부분 업데이트가 되지 않을수도 있음
<ul>
<li>자주 길이가 변한다면 해당 필드가 가질 수 있는 최대 길이로 초기화하거나 애플리케이션에서 추가로 패딩해서 고정 길이의 문자열로 만들어서 저장하는 방법이 있음</li>
</ul>
</li>
</ul>
<h2 id="json-타입-콜레이션과-비교">JSON 타입 콜레이션과 비교</h2>
<ul>
<li>json 컬럼에 저장되는 데이터와 이를 가공해서 나온 결과는 모두 utf8mb4 문자 집합과 utf8mb4_bin 콜레이션을 가진다.
<ul>
<li>utf8mb4_bin 콜레이션은 바이너리 콜레이션이므로 json을 가공해서 나온 문자열은 대소문자나 액센트 문자도 구분해서 비교한다.</li>
</ul>
</li>
</ul>
<h2 id="json-컬럼-선택">JSON 컬럼 선택</h2>
<ul>
<li>TEXT/BLOB vs JSON
<ul>
<li>TEXT/BLOB에 json 문자열을 저장하는 경우 아무런 변환과정을 거치지 않고 값을 디스크에 저장한다.</li>
<li>JSON 타입은 json 데이터를 이진 포맷으로 컴팩션해서 저장하고, 필요한경우 부분 업데이트를 통한 빠른 변경 기능을 제공한다.</li>
<li>A무조건 json 타입 사용이 좋음</li>
</ul>
</li>
<li>정규화한 컬럼 vs json 컬럼
<ul>
<li>json 컬럼만 유지하는 경우에도 필요한 인덱스를 모두 생성할 수 있음</li>
<li>MySQL 8.0부터 멀티 밸류 인덱스 기능이 지원되기 때문에 json document에서 array 타입의 필드에도 인덱스를 생성할 수 있게됨</li>
<li>성능을 중심으로 판단한다면 정규화된 컬럼을 추천</li>
<li>테이블을 너무 정규화했을때 테이블 갯수가 많아지더간 응용 프로그램의 코드도 길어질 수 있음
<ul>
<li>중요도가 낮다면 json 컬럼 사용도 가능</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="가상-컬럼-파생-컬럼">가상 컬럼 (파생 컬럼)</h1>
<ul>
<li>MySQL 서버의 가상 컬럼은 <code>가상 컬럼</code>/<code>스토어드 컬럼</code>으로 구분</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- 가상 컬럼
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_virual_column</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">decimal</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="s1">&#39;0.00&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">quantity</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">total_price</span><span class="w"> </span><span class="nb">decimal</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="p">(</span><span class="n">quantity</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">price</span><span class="p">)</span><span class="w"> </span><span class="n">virtual</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- 스토어드 컬럼
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_stored_column</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">decimal</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="s1">&#39;0.00&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">quantity</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">total_price</span><span class="w"> </span><span class="nb">decimal</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="p">(</span><span class="n">quantity</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">price</span><span class="p">)</span><span class="w"> </span><span class="n">stored</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>컬럼의 정의 뒤에 as절로 계산식을 정의한다.
<ul>
<li>마지막에 <code>stored</code> 키워드가 사용되면 스토어드 컬럼으로 생성되며, 그 외에는 가상 컬럼으로 생성된다. (default는 virtual)</li>
</ul>
</li>
<li>가상 컬럼의 표현식은 입력이 동일하면 시점과 관계없이 결과가 항상 동일한 표현식만 사용할 수 있음
<ul>
<li>사용자 변수나 not-deterministic 옵션의 함수나 표현식 사용할 수 없음</li>
<li>MySQL 8.0 까지는 가상 컬럼의 표현식에 서브쿼리나 스토어드 프로그램을 사용할 수 없음</li>
</ul>
</li>
<li>가상/스토어드 컬럼 모두 다른 컬럼의 값을 참조해서 새로운 값을 만들어 관리한다는 공통점이 있음
<ul>
<li>단점
<ul>
<li>가상 컬럼
<ul>
<li>컬럼의 값이 디스크에 저장되지 않음</li>
<li>컬럼의 구조 변경은 테이블 리빌드를 필요로 하지 않음</li>
<li>컬럼의 값은 레코드가 읽히기 전 또는 before 트리거 실행 직후에 계산되어 만들어짐</li>
</ul>
</li>
<li>스토어드 컬럼
<ul>
<li>컬럼의 값이 물리적으로 디스크에 저장됨</li>
<li>컬럼의 구조 변경은 다른 일반 테이블과 같이 필요 시 테이블 리빌드 방식으로 처리됨</li>
<li>insert, update 시점에만 컬럼의 값이 계산됨</li>
</ul>
</li>
</ul>
</li>
<li>차이
<ul>
<li>계산된 컬럼의 값이 디스크에 실제 저장되는지 여부
<ul>
<li>가상 컬럼은 디스크에 저장되지 않지만 항상 그런건 아님</li>
</ul>
</li>
</ul>
</li>
<li>가상 컬럼은 데이터를 조회하는 시점에 매번 계산되기 때문에 가상 컬럼의 값을 계산하는 과정이 복잡하고 시간이 오래걸린다면 스토어드 컬럼으로 변경하는 것이 성능 향상에 좋음</li>
</ul>
</li>
</ul>
]]></description>
            <pubDate>Fri, 29 Mar 2024 14:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/database/db_15_2/</guid>
        </item>
    
        <item>
            <title>ch15. Data type in DB</title>
            <link>http://localhost:1313/posts/database/db_15_1/</link>
            <description>&lt;![CDATA[<h1 id="저장-공간">저장 공간</h1>
<ul>
<li>
<p>char vs varchar: 둘다 문자열을 저장할 수 있는 데이터 타입, 차이는 고정/가변 길이</p>
<ul>
<li>두 타입 모두 한 글자를 저장하기 위해 사용하는 문자 집합에 따라 1 ~ 4바이트를 사용한다.</li>
<li>char에 저장될 때는 추가 공간이 필요없지만 varchar에 저장할 때는 문자열의 길이를 관리하기 위한 1 ~ 2바이트의 추가 공간이 필요함</li>
<li>varchar 타입의 길이가 255바이트 이하면 1바이트만 사용, 256바이트 이상이면 2바이트를 사용한다.
<ul>
<li>varchar 타입의 최대 길이는 65536 바이트 <code>256 * 256</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>char, varchar를 결정하는 기준</p>
<ul>
<li>저장되는 문자열의 길이가 비슷한지</li>
<li>컬럼의 값이 자주 변경되는지</li>
</ul>
<p><img src="/images/15_1.jpg" alt="photo"></p>
<p><img src="/images/15_2.jpg" alt="photo"></p>
<ul>
<li>char 타입은 이미 준비된 공간에 값을 업데이트하면 된다.</li>
<li>varchar 타입에서 길이가 더 큰 값으로 변경되면 레코드 자체를 다른 공간으로 옮겨서 저장해야 한다.
<ul>
<li>레코드의 이동이나 분리는 char보다 더 큰 공간이나 자원을 낭비함</li>
</ul>
</li>
</ul>
</li>
<li>
<p>char, varchar 키워드 뒤에 인자값 n</p>
<ul>
<li>바이트 크기가 아닌 글자 크기를 명시</li>
<li>일반적으로 영어를 포함한 서구권 언어는 각 문자가 1바이트를 사용하므로 10바이트를 사용</li>
<li>한국어/일본어 같은 아시아권 언어는 각 문자가 최대 2바이트를 사용하므로 20바이트를 사용</li>
<li>UTF-8과 같은 유니코드는 최대 4바이트까지 사용하므로 40바이트를 사용</li>
</ul>
</li>
</ul>
<h2 id="저장-공간과-스키마-변경-online-ddl">저장 공간과 스키마 변경 (Online DDL)</h2>
<ul>
<li>MySQL 서버는 데이터가 변경되는 도중에도 스키마를 변경할 수 있도록 Online DDL을 제공
<ul>
<li>모든 스키마 변경이 온라인으로 가능한건 아님</li>
<li>변경 작업의 특성에 따라 select는 가능, 데이터 변경은 불가능할 수 있음</li>
<li>varchar 컬럼의 길이를 늘리는 작업은 작업의 길이에 따라 빠르게 처리될 수 있지만 읽기 잠금을 걸고 레코드를 복사하는 작업이 필요할 수 있음</li>
</ul>
</li>
</ul>
<p><img src="/images/online_ddl.jpg" alt="photo"></p>
<ul>
<li>컬럼의 타입을 varchar(63)으로 늘리는 경우 잠금 없이 빠르게 변경될 수 있음</li>
<li>varchar(64)으로 늘리는 경우 inplace 알고리즘으로 스키마 변경이 허용되지 않음
<ul>
<li>copy 알고리즘으로 변경 -&gt; 읽기잠금 필요, 시간도 오래걸림</li>
</ul>
</li>
<li>utf8mb4 문자 집합을 사용하는 varchar(60)은 최대 길이가 240바이트라서 1바이트면 된다.</li>
<li>varchar(64)은 문자열의 최대인 256바이트보다 크기 때문에 2바이트로 변경되어야 한다.
<ul>
<li>MySQL 서버는 읽기 잠금을 걸어서 데이터 변경을 막고 테이블의 레코드를 복사하는 방식으로 처리함</li>
<li>varchar 타입의 길이가 크게 변경될 것으로 예상된다면 길이 저장 공간의 크기가 바뀌지 않도록 미리 조금 크게 설계하는 것이 좋음</li>
</ul>
</li>
</ul>
<h2 id="문자-집합-캐릭터-셋">문자 집합 (캐릭터 셋)</h2>
<ul>
<li>
<p>문자 집합은 문자열을 사용하는 char, varchar, text 타입의 컬럼에만 설정할 수 있음</p>
</li>
<li>
<p>MySQL에서는 MySQL 서버와 DB, 테이블 단위로 기본 문자 집합을 설정할 수 있음</p>
<ul>
<li>테이블의 문자 집합을 UTF-8로 설정하면 컬럼의 문자 집합을 별도로 지정하지 않아도 UTF-8을 사용</li>
</ul>
</li>
<li>
<p>최근에는 여러 나라의 언어를 동시에 지원하기 위해 utf8mb4을 사용하는 추세</p>
</li>
<li>
<p>MySQL 서버에서 사용 가능한 문자 집합은 <code>SHOW CHARACTER SET</code> 명령으로 확인한다.<br>
<img src="/images/show_character_set.jpg" alt="photo"></p>
<ul>
<li><code>default collation</code> 컬럼에는 해당 문자 집합의 기본 콜레이션을 표시</li>
</ul>
</li>
<li>
<p>MySQL에는 문자 집합을 설정하는 시스템 변수가 여러가지 있음</p>
<p><img src="/images/15_3.jpg" alt="photo"></p>
</li>
</ul>
<h2 id="클라이언트로부터-쿼리를-요청했을-때의-문자-집합-변환">클라이언트로부터 쿼리를 요청했을 때의 문자 집합 변환</h2>
<ul>
<li>MySQL 서버는 클라이언트로부터 받은 메시지가 character_set_client에 지정된 문자 집합으로 인코딩되어 있다고 판단하고, 받은 문자열 데이터를 character_set_connection에 정의된 문자 집합으로 변환한다.
<ul>
<li>SQL 문장에 별도의 문자 집합이 지정된 문자열은 변환 대상이 아님
<ul>
<li>SQL 문장에서 별도로 문자 집합을 설정하는 지정자를 <code>인트로듀서</code>라고 함
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">emp_no</span><span class="p">,</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">employees</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">first_name</span><span class="o">=</span><span class="s1">&#39;Matt&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">emp_no</span><span class="p">,</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">employees</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">first_name</span><span class="o">=</span><span class="n">_latin1</span><span class="s1">&#39;Matt&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>1번 쿼리의 &lsquo;Matt&rsquo;은 character_set_connection으로 문자 집합이 변환된 이후 처리</li>
<li>2번 쿼리는 인트로듀서가 사용되어 문자 집합의 변환되지 않음</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="처리-결과를-클라이언트로-전송할-때의-문자-집합-변환">처리 결과를 클라이언트로 전송할 때의 문자 집합 변환</h2>
<ul>
<li>character_set_connection에 정의된 문자 집합으로 변환해 SQL을 실행한 다음 MySQL 서버는 쿼리의 결과를 character_set_results 변수에 설정된 문자 집합으로 변환해서 클라이언트로 전송한다.
<ul>
<li>결과 셋에 포함된 컬럼의 값이나 컬럼명과 같은 메타데이터는 모두 character_set_results로 인코딩되어 클라이언트로 전송된다.</li>
</ul>
</li>
<li>변환 전/후의 문자 집합이 똑같다면 별도의 문자 집합 변환 작업은 모두 생략한다.</li>
</ul>
<h2 id="콜레이션-collation">콜레이션 (Collation)</h2>
<ul>
<li>문자열 컬럼의 값에 대한 비교나 정렬 순서를 위한 규칙</li>
</ul>
<h3 id="콜레이션-이해">콜레이션 이해</h3>
<ul>
<li>하나의 문자 집합에 속한 콜레이션은 다른 문자 집합과 공유해서 사용할 수 없음</li>
<li>콜레이션을 지정하지 않으면 디폴트 값으로 지정</li>
<li>MySQL 서버에서 사용 가능한 콜레이션은 <code>show collation</code> 명령으로 확인
<ul>
<li>일반적으로 콜레이션의 이름은 2 or 3개의 파트로 구분되어 있음
<ul>
<li>3개의 파트로 구성된 콜레이션
<ul>
<li>첫번째 파트는 문자 집합의 이름</li>
<li>두번째 파트는 해당 문자 집합의 하위 분류</li>
<li>세번째 파트는 대/소문자 구분 여부
<ul>
<li><code>ci</code>이면 대소문자 구분x, <code>cs</code>면 대소문자 구분o</li>
</ul>
</li>
</ul>
</li>
<li>2개의 파트로 구성된 콜레이션
<ul>
<li>첫번째 파트는 문자 집합의 이름</li>
<li>두번째 파트는 <code>bin</code>
<ul>
<li>이진 데이터를 의미, 별도의 콜레이션을 가지지 않음</li>
<li>비교 및 정렬은 실제 문자 데이터의 바이트 값 기준으로 수행</li>
</ul>
</li>
</ul>
</li>
<li><code>utf8mb4</code>
<ul>
<li>액센트 문자의 구분 여부 추가 (ai, as)</li>
<li><code>utf8mb4_0900_ai_ci</code>: 액센트를 가지지 않은 문자</li>
<li><code>utf8mb4_0900_as_ci</code>: 액센트를 가진 문자</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">db_test</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="k">set</span><span class="o">=</span><span class="n">utf8mb4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_member</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">member_id</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">latin1_general_cs</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">member_name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8_bin</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">member_email</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>create database 명령으로 기본 문자 집합이 utf8mb4인 db를 생성</li>
<li>create table 명령에서 각 컬럼이 서로 다른 문자 집합이나 콜레이션을 사용하도록 정의</li>
</ul>
<h3 id="utf8mb4-문자-집합의-콜레이션">utf8mb4 문자 집합의 콜레이션</h3>
<table>
<thead>
<tr>
<th>콜레이션</th>
<th>UCA 버전</th>
</tr>
</thead>
<tbody>
<tr>
<td>uf8_unicode_ci</td>
<td>4.0.0</td>
</tr>
<tr>
<td>utf8_unicode_520_ci</td>
<td>5.2.0</td>
</tr>
<tr>
<td>utf8mb4_unicode_520_ci</td>
<td>5.2.0</td>
</tr>
<tr>
<td>utf8mb4_0900_ai_ci</td>
<td>9.0.0</td>
</tr>
</tbody>
</table>
<ul>
<li>숫자 값이 포함되지 않은 콜레이션은 4.0.0버전</li>
<li>콜레이션 이름에 Locale이 포함되어 있는지 여부로 언어에 종속적인 콜레이션과 비종속적인 콜레이션으로 구분할 수 있음</li>
<li>UCA 9.0.0 버전은 이전의 버전보다 빠르다고 MySQL 매뉴얼에서 소개함
<ul>
<li>실제로는 크게 성능 영향은 없음</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- 0.58 sec
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">set</span><span class="w"> </span><span class="k">names</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_general_ci</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">benchmark</span><span class="p">(</span><span class="mi">10000000</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;한글입니까&#39;</span><span class="o">=</span><span class="s1">&#39;한글입니다&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- 1.71 sec
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">set</span><span class="w"> </span><span class="k">names</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_0900_ai_ci</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">benchmark</span><span class="p">(</span><span class="mi">10000000</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;한글입니까&#39;</span><span class="o">=</span><span class="s1">&#39;한글입니다&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>속도 차이가 크지 않기 때문에 콜레이션 결정 기준을 성능을 기준으로 하기보단 필요에 따라 결정하는 것을 권장</li>
</ul>
<h2 id="비교-방식">비교 방식</h2>
<ul>
<li>char, varchar의 비교 방식은 거의 같음</li>
<li>MySQL 서버에서 지원하는 대부분의 문자 집합과 콜레이션에서 char, varchar 타입을 비교할 때 공백문자를 뒤에 붙여서 문자열의 길이를 동일하게 만든 후 비교</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;ABC&#39;</span><span class="o">=</span><span class="s1">&#39;ABC   &#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;ABC&#39;</span><span class="o">=</span><span class="s1">&#39;   ABC&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>utf8mb4 문자집합이 UCA버전 9.0.0을 지원하면서 문자열 뒤 공백에 대한 비교 방식이 달라짐</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">set</span><span class="w"> </span><span class="k">names</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_bin</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;a &#39;</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">set</span><span class="w"> </span><span class="k">names</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_0900_bin</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;a &#39;</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="k">collation_name</span><span class="p">,</span><span class="w"> </span><span class="n">pad_attribute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">information_schema</span><span class="p">.</span><span class="n">collations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="k">collation_name</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;utf8mb4%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>문자 집합이 문자열 뒤의 공백이 비교 결과에 영향이 있는지는 information_schema db의 collations 뷰에서 pad_attribute 컬럼의 값으로 판단
<ul>
<li><code>pad space</code>로 표시된 콜레이션은 비교 대상 문자열의 길이가 같아지도록 공백을 채움</li>
<li><code>no pad</code>로 표시된 콜레이션은 문자열에 공백을 채우지 않고 그대로 비교
<ul>
<li>비교 대상 문자열의 길이가 많이 차이나는 경우 더 빠른 성능</li>
</ul>
</li>
</ul>
</li>
<li><code>like</code>를 사용한 문자열 패턴 비교는 공백 문자가 유효 문자로 취급됨
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;ABC   &#39;</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="o">`</span><span class="n">ABC</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;   ABC&#39;</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="o">`</span><span class="n">ABC</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="s1">&#39;ABC   &#39;</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="o">`</span><span class="n">ABC</span><span class="o">%`</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="문자열-이스케이프-처리">문자열 이스케이프 처리</h2>
<table>
<thead>
<tr>
<th>이스케이프 표기</th>
<th>의미</th>
</tr>
</thead>
<tbody>
<tr>
<td>\0</td>
<td>ascii null문자 (0x00)</td>
</tr>
<tr>
<td>\&rsquo;</td>
<td>홑따옴표(')</td>
</tr>
<tr>
<td>\&quot;</td>
<td>쌍따옴표(&quot;)</td>
</tr>
<tr>
<td>\b</td>
<td>백스페이스 문자</td>
</tr>
<tr>
<td>\n</td>
<td>개행문자</td>
</tr>
<tr>
<td>\r</td>
<td>캐리지 리턴 문자 (window에서는 \r\n 조합으로 개행문자 사용)</td>
</tr>
<tr>
<td>\t</td>
<td>탭 문자</td>
</tr>
<tr>
<td>\\</td>
<td>백 슬래시 문자(\)</td>
</tr>
<tr>
<td>\%</td>
<td>퍼센트 문자</td>
</tr>
<tr>
<td>\_</td>
<td>언더 스코어 문자</td>
</tr>
</tbody>
</table>
<ul>
<li>%, _ 문자는 like를 사용하는 패턴 검색에서만 사용 가능</li>
<li><code>'</code> <code>&quot;</code>를 두번 연속으로 표기해서 이스케이프 처리할 수 있음</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="p">(</span><span class="n">fd1</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#39;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;ab&#39;&#39;ba&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#34;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;ab&#34;&#34;ba&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#39;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;ab\&#39;ba&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#34;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;ab\&#34;ba&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#34;&#34;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;ab&#34;&#34;ba&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- ab&#39;&#39;ba
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_char_escape</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;ab&#39;&#39;ba&#34;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>홑/쌍따옴표를 쌍/홑따옴표로 감싸면 이스케이프 처리가 되지 않음</li>
</ul>
<h2 id="정수">정수</h2>
<table>
<thead>
<tr>
<th>데이터 타입</th>
<th>저장 공간 (Bytes)</th>
<th>최솟값(signed)</th>
<th>최솟값(unsigned)</th>
<th>최댓값(signed)</th>
<th>최댓값(unsigned)</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>-128</td>
<td>0</td>
<td>127</td>
<td>255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768</td>
<td>0</td>
<td>32767</td>
<td>65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608</td>
<td>0</td>
<td>8388607</td>
<td>16777215</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>-2147483648</td>
<td>0</td>
<td>2147483647</td>
<td>4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-263</td>
<td>0</td>
<td>263-1</td>
<td>264-1</td>
</tr>
</tbody>
</table>
<ul>
<li>정수 타입은 unsigned 옵션 사용 가능
<ul>
<li>명시하지 않으면 signed으로 지정</li>
<li>auto increment와 같이 음수가 될 수 없는 값을 저장하는 컬럼에 unsigned가 적절</li>
</ul>
</li>
<li>외래키로 사용하거나 조인의 조건이 되는 컬럼은 옵션을 일치시키는 것이 좋음</li>
</ul>
<h2 id="부동-소수점">부동 소수점</h2>
<ul>
<li>float, double 타입을 사용</li>
<li>소수점의 위치가 고정적이지 않음
<ul>
<li>숫자값의 길이에 따라 유효범위의 소수점 자릿수가 바뀜</li>
</ul>
</li>
<li>근삿값을 저장하는 방식이라 동등 비교는 사용할 수 없음</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">	</span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_float</span><span class="w"> </span><span class="p">(</span><span class="n">fd1</span><span class="w"> </span><span class="nb">float</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">tb_float</span><span class="w"> </span><span class="k">values</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">-- 결과 x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tb_float</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">fd1</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>float는 정밀도를 명시하지 않으면 4바이트를 사용해서 유효 자릿수를 8개까지 유지
<ul>
<li>정밀도를 명시하면 최대 8바이트까지 사용가능</li>
</ul>
</li>
<li>부동 소수점 값을 저장할 때 유효 소수점의 자릿수만큼 10을 곱해서 정수로 만드는 방법이 있음</li>
</ul>
<h2 id="decimal">DECIMAL</h2>
<ul>
<li>금액이나 대출이자 등과 같이 고정된 소수점까지 정확하게 관리해야 할 때 사용
<ul>
<li>이런경우 float, double 타입을 사용하면 안됨</li>
</ul>
</li>
<li>MySQL에서 소수점 이하의 값까지 정확하게 관리하려면 DECIMAL 타입을 이용해야 한다.</li>
<li>숫자 하나를 저장하는데 1/2바이트가 필요하므로 한/두자리를 저장하는데 1바이트가 필요하다.</li>
<li>곱셈 연산은 decimal보다 bigint가 더 빠름
<ul>
<li>정수를 관리하기 위해 decimal을 사용하는건 좋지 않음</li>
</ul>
</li>
</ul>
<h2 id="정수-타입의-컬럼을-생성할-때의-주의사항">정수 타입의 컬럼을 생성할 때의 주의사항</h2>
<ul>
<li>부동소수점이나 decimal 타입을 이용할 경우 타입의 이름 뒤에 괄호로 정밀도를 표시하는 것이 일반적
<ul>
<li>ex
<ul>
<li>decimal(20, 5): 정수부를 15자리까지, 소수부를 5자리까지 저장</li>
<li>decimal(20): 정수부로만 20자리까지 저장</li>
</ul>
</li>
</ul>
</li>
<li>decimal은 저장 공간의 크기가 가변적인 데이터 타입이라 저장 가능한 자릿수를 결정함과 동시에 저장 공간의 크기까지 제한한다.</li>
<li>MySQL 5.7까지는 부동/고정 소수점이 아닌 정수 타입을 생성할 때도 크기를 명시할 수 있는 문법을 지원했음</li>
<li>MySQL 8.0부터는 정수 타입에 자릿수를 사용하는 기능은 제거됨
<ul>
<li>테이블을 생성할때 bitint(10) 처럼 자릿수를 명시하면 경고메시지를 표시하고 해당 자릿수는 무시됨</li>
</ul>
</li>
</ul>
<h2 id="자동-증가-auto_increment-옵션-사용">자동 증가 (AUTO_INCREMENT) 옵션 사용</h2>
<ul>
<li>PK를 구성하는 컬럼의 크기가 너무 크거나 PK로 사용할만한 컬럼이 없는 경우 사용</li>
<li><code>auto_increment_increment</code> <code>auto_increment_offset</code> 시스템 설정으로 자동 증가 값을 설정할 수 있음
<ul>
<li>ex. auto_increment_offset=5 auto_increment_increment=10이면 5, 15, 25, 35</li>
</ul>
</li>
<li>테이블당 하나만 사용 가능</li>
<li>다음 증가 값이 얼마인지 <code>show create table</code> 명령으로 조회 가능</li>
<li>auto increment 옵션을 사용한 컬럼은 PK나 유니크 키의 일부로 정의해야 한다.
<ul>
<li>PK나 유니크 키가 여러 개의 컬럼으로 구성되면 컬럼값이 증가하는 패턴이 달라짐
<ul>
<li>MyISAM: 해당 컬럼이 PK나 유니크 키의 아무 위치에서나 사용될 수 있음</li>
<li>InnoDB: auto increment 컬럼으로 시작되는 인덱스를 생성해야 함
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- fd_pk2 컬럼이 pk의 뒤쪽에 있어서 에러발생
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_autoinc_innodb</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_pk1</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_pk2</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="p">(</span><span class="n">fd_pk1</span><span class="p">,</span><span class="w"> </span><span class="n">fd_pk2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">)</span><span class="w"> </span><span class="n">engine</span><span class="o">=</span><span class="n">innodb</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">-- fd_pk2 컬럼이 pk의 뒤쪽에 위치하지만 유니크 키의 맨 앞에 위치하므로 정상적으로 테이블이 생성됨
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_autoinc_innodb</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_pk1</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">fd_pk2</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="p">(</span><span class="n">fd_pk1</span><span class="p">,</span><span class="w"> </span><span class="n">fd_pk2</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">unique</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="n">ux_fdpk2</span><span class="w"> </span><span class="p">(</span><span class="n">fd_pk2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">)</span><span class="w"> </span><span class="n">engine</span><span class="o">=</span><span class="n">innodb</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="날짜와-시간">날짜와 시간</h1>
<table>
<thead>
<tr>
<th>데이터 타입</th>
<th>MySQL 5.6.4 이전</th>
<th>MySQL 5.6.4 부터</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR</td>
<td>1바이트</td>
<td>1바이트</td>
</tr>
<tr>
<td>DATE</td>
<td>3바이트</td>
<td>3바이트</td>
</tr>
<tr>
<td>TIME</td>
<td>3바이트</td>
<td>3바이트 + (밀리초 단위 저장 공간)</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8바이트</td>
<td>5바이트 + (밀리초 단위 저장 공간)</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4바이트</td>
<td>4바이트 + (밀리초 단위 저장 공간)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>밀리초 단위 자릿수</th>
<th>저장공간</th>
</tr>
</thead>
<tbody>
<tr>
<td>없음</td>
<td>0바이트</td>
</tr>
<tr>
<td>1, 2</td>
<td>1바이트</td>
</tr>
<tr>
<td>3, 4</td>
<td>2바이트</td>
</tr>
<tr>
<td>5, 6</td>
<td>3바이트</td>
</tr>
</tbody>
</table>
<ul>
<li>밀리초 단위는 2자리당 1바이트 공간 필요
<ul>
<li>ex. MySQL 8.0에서 DATETIME(6) 타입은 5 + 3바이트를 사용</li>
</ul>
</li>
<li>MySQL의 date, datetime은 컬럼 자체에 타임존 정보가 저장되지 않아서 dbms 커넥션의 타임존과 관계없이 클라이언트로부터 입력된 값을 그대로 저장하고 출력한다.</li>
<li>timestamp는 항상 UTC 타임존으로 저장되므로 타임존이 달라져도 값이 자동으로 보정된다.</li>
</ul>
<h2 id="자동-업데이트">자동 업데이트</h2>
<ul>
<li>MySQL 5.6 이전까지 timestamp 컬럼은 레코드의 다른 컬럼 데이터가 변경될 때마다 시간이 자동으로 업데이트되고, datetime은 그렇지 않은 차이가 있었음</li>
<li>MySQL 5.6 부터는 timestamp, datetime 모두 insert, update 문장이 실행될때마다 자동으로 업데이트되기 위한 옵션을 정의해야 함</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">  </span><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">tb_autoupdate</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">bigint</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">null</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">created_at_ts</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="k">current_timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">updated_at_ts</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="k">current_timestamp</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="k">current_timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">created_at_dt</span><span class="w"> </span><span class="n">datetime</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="k">current_timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">updated_at_dt</span><span class="w"> </span><span class="n">datetime</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="k">current_timestamp</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="k">current_timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
            <pubDate>Fri, 29 Mar 2024 08:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/database/db_15_1/</guid>
        </item>
    
        <item>
            <title>Building your own Docker images</title>
            <link>http://localhost:1313/posts/docker/docker_3/</link>
            <description>&lt;![CDATA[<h1 id="using-a-container-image-from-docker-hub">Using a container image from Docker Hub</h1>
]]></description>
            <pubDate>Mon, 03 Apr 2023 15:24:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/docker/docker_3/</guid>
        </item>
    
        <item>
            <title>Understanding Docker and Running Hello World</title>
            <link>http://localhost:1313/posts/docker/docker_2/</link>
            <description>&lt;![CDATA[<h1 id="running-hello-world-in-a-container">Running Hello World in a container</h1>
<p>Let&rsquo;s just simply run below code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run diamol/ch02-hello-diamol
</span></span></code></pre></td></tr></table>
</div>
</div><p>May you don&rsquo;t know the meaning of code, It&rsquo;s okay. At the end of this post, you will know what that means naturally. Since I already download image <code>diamol/ch02-hello-diamol</code>, print out like below:</p>
<pre tabindex="0"><code>docker container run diamol/ch02-hello-diamol  
---------------------  
Hello from Chapter 2!  
---------------------  
My name is:  
b56c8d50100a  
---------------------  
Im running on:  
Linux 6.6.16-linuxkit aarch64  
---------------------  
My address is:  
inet addr:172.17.0.2 Bcast:172.17.255.255 Mask:255.255.0.0  
---------------------  
</code></pre><p>If you want to run container with any image, you need that image first(if you don&rsquo;t have, docker download that image which Docker calls <code>pulling (tip)</code> ). This example simply print out message &lsquo;Hello from Chapter 2!&rsquo; with details of container running. The image contains all the content for the application, along with instructions telling Docker how to start the application.</p>
<ul>
<li>The machine name, in this example: b56c8d50100a</li>
<li>The Operating system, in this example: Linux 6.6.16-linuxkit aarch64</li>
<li>The network address, in this example: 172.17.0.2</li>
</ul>
<p>Though it&rsquo;s very simple example, we could see the fundamental of docker workflow. <code>build (primary)</code> - <code>share (primary)</code> - <code>run (primary)</code> For the specific descriptions, Someone packages their application to run in a container, and then publishes it so it’s available to other users. Then anyone with access can run the app in a container.</p>
<p>These three concepts are powerful enough to describe how docker works. Because the workflow is the same no matter how complicated the application is. And Docker images can be packaged to run on any computer that supports Docker, which makes the app completely portable—<code>portability (tip)</code> is one of Docker’s key benefits.</p>
<blockquote>
<p>tip
Try it agin</p>
</blockquote>
<p>What if you run exatly same command in terminal? There might me &lsquo;almost&rsquo; same output, but sligtly different points are.</p>
<pre tabindex="0"><code>docker container run diamol/ch02-hello-diamol  
---------------------  
Hello from Chapter 2!  
---------------------  
My name is:  
dab89ec979a1  
---------------------  
Im running on:  
Linux 6.6.16-linuxkit aarch64  
---------------------  
My address is:  
inet addr:172.17.0.5 Bcast:172.17.255.255 Mask:255.255.0.0  
---------------------  
</code></pre><p>As you can see above, the computer name is &lsquo;dab89ec979a1&rsquo; and inet address is &lsquo;172.17.0.5&rsquo;. The machine name will change every time, and the IP address will often change, but every container is running on the same computer, so where do these different machine names and network addresses come from? We’ll dig into a little theory next to explain that, and then it’s back to the exercises.</p>
<h1 id="what-is-container">What is container?</h1>
<p>This is example of application in the container:</p>
<p><img src="/images/2_2.jpeg" alt="photo" title="Fig 2.2"></p>
<p>A Docker container is the same idea as a physical container—think of it like a box with an application in it. Inside the box, the application seems to have a computer all to itself: it has its own machine name and IP address, and it also has its own disk drive (Windows containers have their own Windows Registry too). <strong>Fig 2.2</strong> shows how the app is boxed by the container.<br>
Those things are all virtual resources—the hostname, IP address, and filesystem are created by Docker. They’re logical objects that are managed by Docker, and they’re all joined together to create an environment where an application can run. That’s the “box” of the container.<br>
The application inside the box can’t see anything outside the box, but the box is running on a computer, and that computer can also be running lots of other boxes. The applications in those boxes have their own separate environments (managed by Docker), but they all share the CPU and memory of the computer, and they all share the computer’s operating system. You can see in <strong>Fig 2.3</strong> how containers on the same computer are isolated.</p>
<p><img src="/images/2_3.jpeg" alt="photo" title="Fig 2.3"></p>
<p>Why is this so important? It fixes two conflicting problems in computing: <code>isolation (tip)</code> and <code>density (tip)</code>. Density means running as many applications on your computers as possible, to utilize all the processor and memory that you have. But apps may not work nicely with other apps—they might use different versions of Java or .NET, they may use incompatible versions of tools or libraries, or one might have a heavy workload and starve the others of processing power. Applications really need to be isolated from each other, and that stops you running lots of them on a single computer, so you don’t get density.<br>
The original attempt to fix that problem was to use virtual machines (VMs). Virtual machines are similar in concept to containers, in that they give you a box to run your application in, but the box for a VM needs to contain its own operating system—it doesn’t share the OS of the computer where the VM is running. Compare <strong>Fig 2.3</strong>, which shows multiple containers, with <strong>Fig 2.4</strong>, which shows multiple VMs on one computer.</p>
<p><img src="/images/2_4.jpeg" alt="photo" title="Fig 2.4"></p>
<p>That may look like a small difference in the diagrams, but it has huge implications. Every VM needs its own operating system, and that OS can use gigabytes of memory and lots of CPU time—soaking up compute power that should be available for your applications. There are other concerns too, like licensing costs for the OS and the maintenance burden of installing OS updates. VMs provide isolation at the cost of density.<br>
Containers give you both. Each container shares the operating system of the computer running the container, and that makes them extremely lightweight. Containers start quickly and run lean, so you can run many more containers than VMs on the same hardware—typically five to ten times as many. You get density, but each app is in its own container, so you get isolation too. That’s another key feature of Docker: efficiency.<br>
Now you know how Docker does its magic. In the next exercise we’ll work more closely with containers.</p>
<h1 id="connecting-to-a-container-like-a-remote-computer">Connecting to a container like a remote computer</h1>
<p>You can work with containers in other ways too. Next you’ll see how you can run a container and connect to a terminal inside the container, <em>just as if you were connecting to a remote machine.</em> You use the same docker container run command, but you pass some additional flags to run an interactive container with a connected terminal session.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run --interactive --tty diamol/base
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <strong>&ndash;interactive flag</strong> tells Docker <em>you want to set up a connection to the container,</em> and the <strong>&ndash;tty flag</strong> means <em>you want to connect to a terminal session inside the container.</em> The output will show Docker pulling the image, and then you’ll be left with a command prompt. That command prompt is for a terminal session inside the container, as you can see in <strong>Fig 2.5</strong>.</p>
<p><img src="/images/2_5.jpeg" alt="photo" title="Fig 2.5"></p>
<pre tabindex="0"><code>&gt; docker container run --interactive --tty diamol/base
/ # hostname
aa77e539d6b5
/ # date
Mon Apr  8 11:50:30 UTC 2024
</code></pre><p>Remember that the container is sharing your computer’s operating system, which is why you see a Linux shell if you’re running Linux and a Windows command line if you’re using Windows. Docker itself has the same behavior regardless of which operating system or pro- cessor you’re using. It’s the application inside the container that sees it’s running on an Intel-based Windows machine or an Arm-based Linux one. <em>You manage containers with Docker in the same way, whatever is running inside them.</em></p>
<p>open a new terminal, and then run command below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container ls
</span></span></code></pre></td></tr></table>
</div>
</div><p>The output shows you information about each container, including the image it’s using, the container ID, and the command Docker ran inside the container when it started—this is some abbreviated output:</p>
<pre tabindex="0"><code>CONTAINER ID   IMAGE         COMMAND     CREATED         STATUS         PORTS     NAMES
aa77e539d6b5   diamol/base   &#34;/bin/sh&#34;   2 minutes ago   Up 2 minutes             eager_franklin
</code></pre><p>If you have a keen eye, you’ll notice that the container ID is the same as the hostname inside the container. Docker assigns a random ID to each container it creates, and part of that ID is used for the hostname. There are lots of docker container com- mands that you can use to interact with a specific container, which you can identify using the first few characters of the container ID you want.</p>
<p>docker container top lists the processes running in the container. I’m using aa as a short form of the container ID aa77e539d6b5:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container top aa
</span></span></code></pre></td></tr></table>
</div>
</div><pre tabindex="0"><code>PID     USER    TIME    COMMAND
68423   root    0：00   /bin/sh
</code></pre><p>If you have multiple processes running in the container, Docker will show them all. That will be the case for Windows containers, which always have several background processes running in addition to the container application.</p>
<p>docker container logs displays any log entries the container has collected:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container logs aa
</span></span></code></pre></td></tr></table>
</div>
</div><p>docker container inspect shows you all the details of a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container inspect aa
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>The output of these examples is too long to display, so I just skip. Please do yourself.</em></p>
<p>These are the commands you’ll use all the time when you’re working with containers, when you need to troubleshoot application problems, when you want to check if processes are using lots of CPU, or if you want to see the networking Docker has set up for the container.<br>
There’s another point to these exercises, which is to help you realize that <em>as far as Docker is concerned, containers all look the same. Docker adds a consistent management layer on top of every application.</em> You could have a 10-year-old Java app running in a Linux container, a 15-year-old .NET app running in a Windows container, and a brand-new Go application running on a Raspberry Pi. You’ll use the exactly same commands to manage them—<strong>run</strong> to start the app, <strong>logs</strong> to read out the logs, <strong>top</strong> to see the processes, and <strong>inspect</strong> to get the details.<br>
You’ve now seen a bit more of what you can do with Docker; we’ll finish with some exercises for a more useful application. You can close the second terminal window you opened (where you ran docker container logs), go back to the first terminal, which is still connected to the container, and run exit to close the terminal session.</p>
<h1 id="hosting-a-website-in-a-container">Hosting a website in a container</h1>
<p>Let&rsquo;s run code below:</p>
<pre tabindex="0"><code>docker container ls
</code></pre><p>Then you can see nothing, but if you add flag <code>--all</code> (you can use just <code>-a</code> ) you could see like below:</p>
<pre tabindex="0"><code>CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS 
298ced2b6df0   diamol/base    &#34;/bin/sh&#34;     12 minutes ago   Exited (0) 6 minutes ago
aa77e539d6b5   diamol/base    &#34;/bin/sh&#34;     29 minutes ago   Exited (127) 26 minutes ago
ed93dc4f5285   diamol/base    &#34;/bin/sh&#34;     54 minutes ago   Exited (0) 54 minutes ago
4098ddc5876a   diamol/base    &#34;/bin/sh&#34;     54 minutes ago   Exited (127) 54 minutes ago
</code></pre><p>Above example is skiped some fileds(PORTS, NAMES).<br>
The containers have the status Exited. There are a couple of key things to understand here.<br>
First, containers are running only while the application inside the container is run- ning. As soon as the application process ends, the container goes into the exited state. Exited containers don’t use any CPU time or memory. The “Hello World” container exited automatically as soon as the script completed. The interactive container we were connected to exited as soon as we exited the terminal application.<br>
Second, containers don’t disappear when they exit. Containers in the exited state still exist, which means you can start them again, check the logs, and copy files to and from the container’s filesystem. You only see running containers with <code>docker container ls</code>, but <em>Docker doesn’t remove exited containers unless you explicitly tell it to do so. Exited containers still take up space on disk because their filesystem is kept on the computer’s disk.</em></p>
<blockquote>
<p>tip
What about starting containers that stay in the background and just keep running? That’s actually the main use case for Docker:<br>
<strong>Running server applications like websites, batch processes, and databases.</strong></p>
</blockquote>
<p>So now, we need to verify background-running functions of docker. Let&rsquo;s run below code:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run --detach --publish 8088:80 diamol/ch02-hello-diamol-web
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>&ndash;detach: Starts the container in the background and shows the container ID</li>
<li>&ndash;publish: Publishes a port from the container to the computer</li>
</ul>
<p>This time the only output you’ll see is a container ID, and you get returned to your command line. The container is still running in the background. and very next time if you run <code>docker ps</code>, you&rsquo;ll see:</p>
<pre tabindex="0"><code>CONTAINER ID   IMAGE                          COMMAND              CREATED          STATUS
a1b41fa6efa2   diamol/ch02-hello-diamol-web   &#34;httpd-foreground&#34;   20 seconds ago   Up 19 seconds
PORTS                  NAMES  
0.0.0.0:8088-&gt;80/tcp   confident_wing
</code></pre><p>When you install Docker, it injects itself into your computer’s networking layer. Traffic coming into your computer can be intercepted by Docker, and then Docker can send that traffic into a container. Containers aren’t exposed to the outside world by default. Each has its own IP address, but that’s an IP address that Docker creates for a network that Docker manages—the container is not attached to the physical network of the computer. Publishing a container port means Docker listens for network traffic on the computer port, and then sends it into the container. In the preceding example, traffic sent to the computer on port 8088 will get sent into the container on port 80—you can see the traffic flow in <strong>Fig 2.6.</strong></p>
<p><img src="/images/2_6.jpeg" alt="photo" title="Fig 2.6"></p>
<p>In this example my computer is the machine running Docker, and it has the IP address 192.168.2.150. That’s the IP address for my physical network, and it was assigned by the router when my computer connected. Docker is running a single container on that computer, and the container has the IP address 172.0.5.1. That address is assigned by Docker for a virtual network managed by Docker. No other computers in my network can connect to the container’s IP address, because it only exists in Docker, but they can send traffic into the container, because the port has been published.</p>
<p>By using <code>docker stats short container ID</code>, (in this example, I use docker stats a1b) you can see current status of that container. It shows a live view of how much CPU, memory, network, and disk the container is using.<br>
Also you can use <code>docker container rm --force $(docker ps -a -q)</code> for terminate container.</p>
<ul>
<li>rm: designate container ID to terminate that container</li>
<li>&ndash;force: terminate even if it is on running</li>
<li>$(): sends the output of inside () from one command into another command</li>
</ul>
<p>So above code meaning like that: Gets a list of all the container IDs on your computer, and removes them all.<br>
This is a good way to tidy up your containers, but use it with caution, because it won’t ask for confirmation.</p>
<h1 id="understanding-how-docker-runs-containers">Understanding how Docker runs containers</h1>
<p><img src="/images/2_7.jpeg" alt="photo" title="Fig 2.7"></p>
<ul>
<li>The Docker Engine is the management component of Docker. It looks after the local image cache, downloading images when you need them, and reusing them if they’re already downloaded. It also works with the operating system to create containers, virtual networks, and all the other Docker resources. The Engine is a background process that is always running (like a Linux daemon or a Windows service).</li>
<li>The Docker Engine makes all the features available through the Docker API, which is just a standard HTTP-based REST API. You can configure the Engine to make the API accessible only from the local computer (which is the default), or make it available to other computers on your network.</li>
<li>The Docker command-line interface (CLI) is a client of the Docker API. When you run Docker commands, the CLI actually sends them to the Docker API, and the Docker Engine does the work.</li>
</ul>
<p>The only way to interact with the Docker Engine is through the API, and there are different options for giving access to the API and securing it. The CLI works by sending requests to the API.</p>
]]></description>
            <pubDate>Sat, 01 Apr 2023 16:45:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/docker/docker_2/</guid>
        </item>
    
        <item>
            <title>Before you begin</title>
            <link>http://localhost:1313/posts/docker/docker_1/</link>
            <description>&lt;![CDATA[<p>Welecome to the <code>Docker</code> series and I&rsquo;m gonna study this book, <code>Learn Docker in a Month of Lunches</code>(2020), by own my word.</p>
<p>This series consists of 4 parts:</p>
<ol>
<li>Understaning Docker Containers &amp; Images</li>
<li>Running Distributed Applications in Containers</li>
<li>Running at Scale with a Container Orchestrator</li>
<li>Getting Your Containers Ready for Production</li>
</ol>
<p>This is the first post about series <code>Docker</code>.
In this part, you can get up to speed quickly on the core Docker concepts: containers, images, and registries. you&rsquo;ll learn how to run applications in containers, package your own applications in containers, and share those applications for other people to use. You&rsquo;ll also learn about storing data in Docker volumes and how you can run stateful apps in containers. After throughing this chapter, you&rsquo;ll be comfortable with all the fundamentals of Docker, and you&rsquo;ll be learning with best pracices baked in from the start.</p>
<h1 id="what-is-docker">What is Docker</h1>
<p>Docker is a platform for running application in lightweight units called <em>containers.</em> Containers have taken hold in software everywhere, from werverless functions in the cloud to strategic planning in the enterprise. Docker is becoming a core com- petency for operators and developers across the industry—in the 2019 Stack Overflow survey, Docker polled as people’s number one “most wanted” technology   And Docker is a simple technology to learn. You can pick up this book as a com- plete beginner, and you’ll be running containers in chapter 2 and packaging appli- cations to run in Docker in chapter 3. Each chapter focuses on practical tasks, with examples and labs that work on any machine that runs Docker—Windows, Mac, and Linux users are all welcome here.   The journey you’ll follow in this book has been honed over the many years I’ve been teaching Docker. Every chapter is hands-on—except this one. Before you start learning Docker, it’s important to understand just how containers are being used in the real world and the type of problems they solve—that’s what I’ll cover here. This chapter also describes how I’ll be teaching Docker, so you can figure out if this is the right book for you.
Now let’s look at what people are doing with containers—I’ll cover the five main scenarios where organizations are seeing huge success with Docker. You’ll see the wide range of problems you can solve with containers, some of which will certainly map to scenarios in your own work. By the end of this chapter you’ll understand why Docker is a technology you need to know, and you’ll see how this book will get you there.</p>
<h2 id="why-containers-will-take-over-the-world">Why containers will take over the world</h2>
<h2 id="creating-lab-envionment">Creating lab envionment</h2>
<p>how to install docker in your operaing system? docker run in your computer as flows:</p>
<ol>
<li>내 블로그가</li>
<li>왜 음란해</li>
<li>이 미친 ㄱㅇ찰푸덮</li>
<li>아러ㅗㄷㅇ라ㅜ</li>
<li>ㅇ러푸대</li>
<li>루</li>
<li></li>
</ol>
<h2 id="being-immediately-effective">Being immediately effective</h2>
<p>“Immediately effective” is another principle of the Month of Lunches series. In all the chapters that follow, the focus is on learning skills and putting them into practice.
Every chapter starts with a short introduction to the topic, followed by try-it-now exercises where you put the ideas into practice using Docker. Then there’s a recap with some more detail that fills in some of the questions you may have from diving in. Lastly there’s a hands-on lab for you to go the next stage.
All the topics center around tasks that are genuinely useful in the real world. You’ll learn how to be immediately effective with the topic during the chapter, and you’ll fin- ish by understanding how to apply the new skill. Let’s start running some containers!</p>]]></description>
            <pubDate>Tue, 28 Mar 2023 09:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/docker/docker_1/</guid>
        </item>
    
        <item>
            <title>How to use Extended Markdown</title>
            <link>http://localhost:1313/posts/markdown/extendedmd/</link>
            <description>&lt;![CDATA[<h1 id="code">Code</h1>
<h2 id="code-in-line">Code in line</h2>
<p>Example: basic: &ldquo;<code>name</code>&rdquo;<br>
options: you can add options featuring as what you want to highlight
just add (primary), (tip), (warning), (success), (danger) <strong>with one white space</strong></p>
<p><code>name (primary)</code></p>
<p><code>name (tip)</code></p>
<p><code>name (warning)</code></p>
<p><code>name (success)</code></p>
<p><code>name (danger)</code></p>
<h2 id="example-of-code-block">Example of code block</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">close</span> <span class="c1">#클릭하면 열립니다</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getUserInput</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;user input is : </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">getUserInput</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you add &lsquo;close&rsquo; option into the first line of the code block, you can roll up the code block</p>
<h3 id="3개부터는-애니메이션-효과가-사라집니다">3개부터는 애니메이션 효과가 사라집니다.</h3>
<h4 id="대신-볼드체로-강조됩니다">대신 볼드체로 강조됩니다.</h4>
<h5 id="또한-개수가-증가할-수록-글자의-크기가-작아집니다">또한 개수가 증가할 수록 글자의 크기가 작아집니다.</h5>
<p>As you can see, more than 2 #, it just be bolder and smaller</p>
<p>🥳 이모지 테스트
😤 이모지 테스트</p>
<h2 id="with--without-count">with &amp; without count</h2>
<ol>
<li>순서를 세고 싶을 땐</li>
<li>넘버링을 하고</li>
</ol>
<ul>
<li>이런 식으로</li>
<li>세지 않을 수도</li>
<li>있습니다.</li>
</ul>
<hr>
<h1 id="quotation">quotation</h1>
<blockquote>
<p>이것은 인용 예시입니다.<br>
두 line을 개행하여 단락 구분을 할 수도 있고 두 space를 띄워 단락 내 개행을 할 수도 있습니다.</p>
<p>기본 인용은 회색으로 표시되며 두 칸을 띄워야 개행이 됩니다.<br>
마찬가지로 옵셥을 추가할 수 있습니다.</p>
</blockquote>
<blockquote>
<p>primary
&lsquo;primary&rsquo; 예약어를 사용한 경우입니다.<br>
주요 문단입니다</p>
</blockquote>
<blockquote>
<p>tip
&rsquo;tip&rsquo; 예약어를 사용한 경우입니다.<br>
팁 문단입니다</p>
</blockquote>
<blockquote>
<p>warning
&lsquo;warning&rsquo; 예약어를 사용한 경우입니다.<br>
경고 문단입니다</p>
</blockquote>
<blockquote>
<p>success
&lsquo;success&rsquo; 예약어를 사용한 경우입니다.<br>
성공 문단입니다</p>
</blockquote>
<blockquote>
<p>danger
&lsquo;danger&rsquo; 예약어를 사용한 경우입니다.<br>
실패(위험) 문단입니다</p>
</blockquote>
<hr>
<h1 id="photo">Photo</h1>
<p>Basically, picture has a shadow. so if you don&rsquo;t want to add it, just add <code>_no</code> at the end of the text in quotation</p>
<ol>
<li>
<p>title with shadow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">photo</span>](<span class="na">/images/example.jpeg &#39;제목을 지어주세요&#39;</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="result">result:</h4>
<p><img src="/images/example.jpeg" alt="photo" title="제목을 지어주세요"></p>
</li>
<li>
<p>title without shadow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"> ![<span class="nt">photo</span>](<span class="na">/images/example.jpeg &#39;제목을 지어주세요_no&#39;</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="result-1">result:</h4>
<p><img src="/images/example.jpeg" alt="photo" title="제목을 지어주세요_no"></p>
</li>
<li>
<p>without title but shadow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">photo</span>](<span class="na">/images/example.jpeg</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="result-2">result:</h4>
<p><img src="/images/example.jpeg" alt="photo"></p>
</li>
<li>
<p>without title and shadow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">photo</span>](<span class="na">/images/example.jpeg &#39;_no&#39;</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="result-3">result:</h4>
<p><img src="/images/example.jpeg" alt="photo" title="_no"></p>
</li>
</ol>
<hr>
<h1 id="tap">Tap</h1>
<blockquote>
<p>::: tabs와 :::을 탭 컨테이너의 시작과 끝으로 사용하며, @tab을 사용하여 다양한 탭을 표시하고 구분합니다.<br>
@tab 다음은 제목이며, 기본적으로 첫 번째 탭이 활성화됩니다.<br>
또한, @tab 다음에 텍스트 :active를 추가하여 해당 탭을 기본적으로 활성화할 수 있습니다.</p>
</blockquote>
<h2 id="example-of-tap">example of tap</h2>
<ol>
<li>
<p>basic use</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">::: tabs <span class="c">&lt;!-- &#39;:::&#39;와 &#39;tabs&#39; 사이에는 반드시 하나의 공백이 있어야 합니다 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> jay<span class="c">&lt;!-- &#39;@tab&#39;과 제목 사이에는 반드시 하나의 공백이 있어야 합니다 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">Hi I&#39;m jay!
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> lay
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">I&#39;m lay!
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> kelvin
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">yeah I&#39;m kelvin!
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">:::
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>::: tabs</p>
<p>@tab jay</p>
<p>Hi I&rsquo;m jay!</p>
<p>@tab lay</p>
<p>I&rsquo;m lay!</p>
<p>@tab kelvin</p>
<p>yeah I&rsquo;m kelvin!</p>
<p>:::</p>
<ol start="2">
<li>
<p>option <code>:active</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> ::: tabs
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="ni">@tab</span> jay
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> Hi I&#39;m jay!
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="ni">@tab:active</span> lay
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> I&#39;m lay!
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="ni">@tab</span> kelvin
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> yeah I&#39;m kelvin!
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"> :::
</span></span><span class="line"><span class="cl"> <span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>::: tabs</p>
<p>@tab jay</p>
<p>Hi I&rsquo;m jay!</p>
<p>@tab:active lay</p>
<p>I&rsquo;m lay!</p>
<p>@tab kelvin</p>
<p>yeah I&rsquo;m kelvin!</p>
<p>:::</p>
<ol>
<li>
<p>option <code>#id</code><br>
you can add &lsquo;id&rsquo; into the tap container and if two containers have same &lsquo;id&rsquo;, they share tap switching event.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">::: tabs#install
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> npm
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">npm을 사용하여 xxx설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> Homebrew
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">Homebrew를 사용하여 xxx설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> MacPorts
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">MacPorts를 사용하여 xxx설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">:::
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">::: tabs#install
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> npm
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">npm을 사용하여 yyy설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> Homebrew
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">Homebrew를 사용하여 yyy설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ni">@tab</span> MacPorts
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">MacPorts를 사용하여 yyy설치
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span><span class="line"><span class="cl">:::
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- 필수 공백 줄 --&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<!-- raw HTML omitted -->
<p>::: tabs#install</p>
<!-- raw HTML omitted -->
<p>@tab npm</p>
<!-- raw HTML omitted -->
<p>npm을 사용하여 xxx설치</p>
<!-- raw HTML omitted -->
<p>@tab Homebrew</p>
<!-- raw HTML omitted -->
<p>Homebrew를 사용하여 xxx설치</p>
<!-- raw HTML omitted -->
<p>@tab MacPorts</p>
<!-- raw HTML omitted -->
<p>MacPorts를 사용하여 xxx설치</p>
<!-- raw HTML omitted -->
<p>:::</p>
<!-- raw HTML omitted -->
<p>::: tabs#install</p>
<!-- raw HTML omitted -->
<p>@tab npm</p>
<!-- raw HTML omitted -->
<p>npm을 사용하여 yyy설치</p>
<!-- raw HTML omitted -->
<p>@tab Homebrew</p>
<!-- raw HTML omitted -->
<p>Homebrew를 사용하여 yyy설치</p>
<!-- raw HTML omitted -->
<p>@tab MacPorts</p>
<!-- raw HTML omitted -->
<p>MacPorts를 사용하여 yyy설치</p>
<!-- raw HTML omitted -->
<p>:::</p>
<!-- raw HTML omitted -->
<hr>
<h1 id="mermaid">mermaid</h1>
<p>you can draw graph and flow chart with mermaid.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">    ```mermaid
</span></span><span class="line"><span class="cl">    flowchart LR
</span></span><span class="line"><span class="cl">        A -- text --&gt; B -- text2 --&gt; C
</span></span><span class="line"><span class="cl">    ```
</span></span></code></pre></td></tr></table>
</div>
</div><pre tabindex="0"><code class="language-mermaid" data-lang="mermaid">flowchart LR
    A -- text --&gt; B -- text2 --&gt; C
</code></pre><p>more usage in here: <a href="https://mermaid.js.org/#/">https://mermaid.js.org/#/</a></p>
<hr>
<h1 id="math">math</h1>
<ol>
<li>math in line</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">    ```math
</span></span><span class="line"><span class="cl">    &#34;<span class="c">&lt;!-- &#39;</span>\(<span class="c">&#39; 와 &#39;</span>\)<span class="c">&#39; 로 인라인 수식의 시작과 끝을 표시 --&gt;</span>&#34;
</span></span><span class="line"><span class="cl">    행내 공식입니다：\( x = {-b \pm \sqrt{b^2-4ac} \over 2a} \)
</span></span><span class="line"><span class="cl">    ```
</span></span></code></pre></td></tr></table>
</div>
</div><pre tabindex="0"><code class="language-math" data-lang="math">행내 공식입니다：\( x = {-b \pm \sqrt{b^2-4ac} \over 2a} \)
</code></pre><ol start="2">
<li>math in block</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">    ```math
</span></span><span class="line"><span class="cl">    &#34;<span class="c">&lt;!-- &#39;$$&#39; 와 &#39;$$&#39; 로 수식 블록의 시작과 끝을 표시 --&gt;</span>&#34;
</span></span><span class="line"><span class="cl">    블럭 내 공식입니다：$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$
</span></span><span class="line"><span class="cl">    ```
</span></span></code></pre></td></tr></table>
</div>
</div><pre tabindex="0"><code class="language-math" data-lang="math">블럭 내 공식입니다：$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$
</code></pre><p>more usage in here: mathjax: <a href="https://www.mathjax.org">https://www.mathjax.org</a></p>]]></description>
            <pubDate>Sat, 12 Feb 2022 09:00:00 &#43;0000</pubDate>
            <guid isPermaLink="true">http://localhost:1313/posts/markdown/extendedmd/</guid>
        </item>
    
    </channel>
</rss>
